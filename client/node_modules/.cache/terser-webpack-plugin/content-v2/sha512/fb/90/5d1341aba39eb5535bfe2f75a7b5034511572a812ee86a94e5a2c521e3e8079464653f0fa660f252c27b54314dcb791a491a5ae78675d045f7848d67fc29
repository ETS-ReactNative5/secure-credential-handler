{"map":"{\"version\":3,\"sources\":[\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/pattern-components/Header.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/pattern-components/DisplayForm.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/pattern-components/ValidatingForm.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/pattern-components/UpdateForm.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/pattern-components/ValidatingFormWizard1.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/pattern-components/ValidatingFormWizard2.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/pattern-components/SimpleList.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/pattern-components/TableList.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/pattern-components/ListToList.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/pattern-components/LinkedList.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/pattern-components/MasterDetail.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/pattern-components/CreateReadUpdateDelete.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/pattern-components/SearchList.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/components/UIShellBody.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/pattern-components/SearchForm.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/components/UIShell.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/App.jsx\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/serviceWorker.js\",\"/Users/muthu/Projects/CloudNative/ocp/KPMG/secure-credential-handler/client/src/index.js\"],\"names\":[\"Header\",\"_this$props\",\"this\",\"props\",\"title\",\"subtitle\",\"react_default\",\"a\",\"createElement\",\"className\",\"data-notification\",\"role\",\"width\",\"height\",\"viewBox\",\"xmlns\",\"d\",\"Component\",\"DisplayForm\",\"_this\",\"Object\",\"classCallCheck\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"data\",\"label\",\"value\",\"type\",\"showDescription\",\"nextProps\",\"setState\",\"pattern_components_Header\",\"Tile\",\"Form\",\"map\",\"item\",\"key\",\"TextInput\",\"disabled\",\"id\",\"labelText\",\"charAt\",\"toUpperCase\",\"slice\",\"replace\",\"DropdownV2\",\"toLowerCase\",\"items\",\"selectedItem\",\"checkFlag\",\"ValidatingForm\",\"convertData\",\"inputData\",\"output\",\"forEach\",\"dataRow\",\"saveData\",\"event\",\"_this$setState2\",\"_this$setState\",\"target\",\"fieldName\",\"name\",\"fieldValue\",\"defineProperty\",\"saveDataDropdown1\",\"_ref\",\"stateInvalid\",\"saveDataDropdown2\",\"_ref2\",\"country\",\"countryInvalid\",\"checkForm\",\"nameInvalid\",\"address\",\"addressInvalid\",\"city\",\"cityInvalid\",\"zipCode\",\"test\",\"zipCodeInvalid\",\"saveForm\",\"preventDefault\",\"dataToSave\",\"updateRow\",\"adding\",\"toggleAdding\",\"dataToLoad\",\"objectSpread\",\"Name\",\"Address\",\"City\",\"State\",\"ZipCode\",\"Country\",\"_this2\",\"onChange\",\"maxLength\",\"invalid\",\"invalidText\",\"ariaLabel\",\"Button\",\"onClick\",\"keys\",\"length\",\"SimpleList\",\"columns\",\"onRowClick\",\"selectedRow\",\"hidden\",\"handlePasswordChange\",\"bind\",\"assertThisInitialized\",\"toggleShow\",\"e\",\"password\",\"fetch\",\"then\",\"response\",\"json\",\"console\",\"log\",\"index\",\"class\",\"renderTableHeader\",\"renderTableData\",\"_this3\",\"student\",\"SecretName\",\"SecretValue\",\"Table\",\"DataTable\",\"TableBody\",\"TableCell\",\"TableContainer\",\"TableHead\",\"TableHeader\",\"TableRow\",\"TableSelectAll\",\"TableSelectRow\",\"UIShellBody\",\"components\",\"Secrets\",\"defaultComponent\",\"PatternName\",\"patternName\",\"Fade20\",\"icon\",\"aria-hidden\",\"UIShell\",\"header\",\"menuTitle\",\"menuItems\",\"onPatternSelection\",\"renderSideNavItems\",\"renderSideNavItem\",\"components_UIShell\",\"href\",\"isActive\",\"aria-label\",\"prefix\",\"defaultExpanded\",\"UIShell_Fade20\",\"components_UIShellBody\",\"App\",\"src_components_UIShell\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { Component } from \\\"react\\\";\\nimport \\\"./patterns.scss\\\";\\n\\nclass Header extends Component {\\n  render() {\\n    const { title, subtitle } = this.props;\\n    return (\\n      <div className=\\\"bx--row pattern-description\\\">\\n        <div className=\\\"bx--col-xs-12\\\">\\n          <h1 className=\\\"pattern-title\\\">{title}</h1>\\n          <div\\n            data-notification\\n            className=\\\"bx--inline-notification bx--inline-notification--info\\\"\\n            role=\\\"alert\\\"\\n          >\\n            <div className=\\\"bx--inline-notification__details\\\">\\n              <svg\\n                className=\\\"bx--inline-notification__icon\\\"\\n                width=\\\"16\\\"\\n                height=\\\"16\\\"\\n                viewBox=\\\"0 0 16 16\\\"\\n                xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n              >\\n                <path d=\\\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm1-3V7H7v6h2zM8 5a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\\\" />\\n              </svg>\\n              <div className=\\\"bx--inline-notification__text-wrapper\\\">\\n                <p className=\\\"bx--inline-notification__title\\\">{\\\"\\\"}</p>\\n                <p className=\\\"bx--inline-notification__subtitle\\\">{subtitle}</p>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default Header;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport { TextInput, Form, DropdownV2, Tile } from \\\"carbon-components-react\\\";\\nimport Header from \\\"./Header\\\";\\nimport \\\"./patterns.scss\\\";\\n\\nclass DisplayForm extends Component {\\n  constructor(props) {\\n    super(props);\\n    const defaultData = [\\n      { label: \\\"Name\\\", value: \\\"John Doe\\\", type: \\\"textinput\\\" },\\n      { label: \\\"Address\\\", value: \\\"123 Main Street\\\", type: \\\"textinput\\\" },\\n      { label: \\\"City\\\", value: \\\"Anytown\\\", type: \\\"textinput\\\" },\\n      { label: \\\"State\\\", value: [\\\"TX\\\"], type: \\\"dropdown\\\" },\\n      { label: \\\"ZipCode\\\", value: \\\"12345\\\", type: \\\"textinput\\\" },\\n      { label: \\\"Country\\\", value: [\\\"United States\\\"], type: \\\"dropdown\\\" }\\n    ];\\n    this.state = {\\n      data: props.data || defaultData,\\n      showDescription: props.showDescription || false\\n    };\\n  }\\n\\n  componentWillReceiveProps(nextProps) {\\n    if (nextProps.data) this.setState({ data: nextProps.data });\\n  }\\n\\n  render() {\\n    const data = this.state.data;\\n    const showDescription = this.state.showDescription;\\n    return (\\n      <div className=\\\"bx--grid\\\">\\n        {showDescription && (\\n          <Header\\n            title=\\\"Display Form\\\"\\n            subtitle=\\\"Displays a model object as a form in a read only display.\\\"\\n          />\\n        )}\\n        <div className=\\\"bx--row\\\">\\n          <div className=\\\"bx--col-xs-12\\\">\\n            <Tile>\\n              <Form>\\n                {data.map(item => {\\n                  if (item.type === \\\"textinput\\\") {\\n                    return (\\n                      <div key={item.label} className=\\\"display-form-item\\\">\\n                        <TextInput\\n                          disabled\\n                          id={item.label}\\n                          value={item.value}\\n                          labelText={\\n                            item.label.charAt(0).toUpperCase() +\\n                            item.label.slice(1).replace(/([A-Z])/g, \\\" $1\\\")\\n                          }\\n                        />\\n                      </div>\\n                    );\\n                  } else if (item.type === \\\"dropdown\\\") {\\n                    return (\\n                      <div key={item.label} className=\\\"display-form-item\\\">\\n                        <p className=\\\"bx--label left-align\\\">{item.label}</p>\\n                        <DropdownV2\\n                          disabled\\n                          id={item.label}\\n                          label={\\\"Select a \\\" + item.label.toLowerCase() + \\\"..\\\"}\\n                          items={item.value}\\n                          selectedItem={item.value[0]}\\n                        />\\n                      </div>\\n                    );\\n                  } else {\\n                    return <div />;\\n                  }\\n                })}\\n              </Form>\\n            </Tile>\\n          </div>\\n        </div>\\n        <br />\\n        <br />\\n      </div>\\n    );\\n  }\\n}\\nexport default DisplayForm;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport {\\n  TextInput,\\n  Form,\\n  DropdownV2,\\n  Button,\\n  Tile\\n} from \\\"carbon-components-react\\\";\\nimport Header from \\\"./Header\\\";\\nimport \\\"./patterns.scss\\\";\\n\\nlet checkFlag = true;\\n\\nclass ValidatingForm extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      dataToSave: {},\\n      showDescription: props.showDescription || false\\n    };\\n    if (this.props.data) {\\n      let dataToLoad = this.convertData(this.props.data);\\n      this.state = {\\n        ...this.state,\\n        name: dataToLoad.Name,\\n        address: dataToLoad.Address,\\n        city: dataToLoad.City,\\n        state: dataToLoad.State[0],\\n        zipCode: dataToLoad.ZipCode,\\n        country: dataToLoad.Country[0]\\n      };\\n    }\\n  }\\n\\n  componentWillReceiveProps(nextProps) {\\n    if (nextProps.data) {\\n      let dataToLoad = this.convertData(nextProps.data);\\n      if (dataToLoad.Name === \\\"Enter data below\\\") {\\n        dataToLoad.Name = \\\"\\\";\\n      }\\n      this.setState({\\n        name: dataToLoad.Name,\\n        address: dataToLoad.Address,\\n        city: dataToLoad.City,\\n        state: dataToLoad.State[0],\\n        zipCode: dataToLoad.ZipCode,\\n        country: dataToLoad.Country[0]\\n      });\\n    }\\n  }\\n\\n  convertData = inputData => {\\n    let output = {};\\n    inputData.forEach(dataRow => {\\n      output[dataRow.label] = dataRow.value;\\n    });\\n    return output;\\n  };\\n\\n  saveData = event => {\\n    const target = event.target;\\n    let fieldName = target.name;\\n    let fieldValue = target.value;\\n    if (!fieldValue) {\\n      this.setState({ [fieldName]: fieldValue, [fieldName + \\\"Invalid\\\"]: true });\\n    } else {\\n      this.setState({\\n        [fieldName]: fieldValue,\\n        [fieldName + \\\"Invalid\\\"]: false\\n      });\\n    }\\n  };\\n\\n  saveDataDropdown1 = ({ selectedItem }) => {\\n    this.setState({ state: selectedItem, stateInvalid: false });\\n  };\\n\\n  saveDataDropdown2 = ({ selectedItem }) => {\\n    this.setState({ country: selectedItem, countryInvalid: false });\\n  };\\n\\n  checkForm = () => {\\n    checkFlag = true;\\n    if (!this.state.name) {\\n      this.setState({ nameInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.address) {\\n      this.setState({ addressInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.city) {\\n      this.setState({ cityInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.state) {\\n      this.setState({ stateInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (\\n      !this.state.zipCode ||\\n      (this.state.country === \\\"United States\\\" &&\\n        !/(^\\\\d{5}$)|(^\\\\d{5}-\\\\d{4}$)/.test(this.state.zipCode))\\n    ) {\\n      this.setState({ zipCodeInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.country) {\\n      this.setState({ countryInvalid: true });\\n      checkFlag = false;\\n    }\\n    return checkFlag;\\n  };\\n\\n  saveForm = event => {\\n    event.preventDefault();\\n    if (this.checkForm()) {\\n      let dataToSave = {\\n        name: this.state.name,\\n        address: this.state.address,\\n        city: this.state.city,\\n        state: this.state.state,\\n        zipCode: this.state.zipCode,\\n        country: this.state.country\\n      };\\n      if (typeof this.props.updateRow === \\\"function\\\") {\\n        this.props.updateRow(dataToSave);\\n      } else {\\n        this.setState({ dataToSave });\\n      }\\n      if (this.props.adding) {\\n        this.props.toggleAdding();\\n      }\\n    }\\n  };\\n\\n  render() {\\n    const showDescription = this.state.showDescription;\\n    return (\\n      <div className=\\\"bx--grid pattern-container\\\">\\n        {showDescription && (\\n          <Header\\n            title=\\\"Validating Form\\\"\\n            subtitle=\\\"Presents a model object as a data input form and interacts with a validation service for validation.\\\"\\n          />\\n        )}\\n        <div className=\\\"bx--row\\\">\\n          <div className=\\\"bx--col-xs-12\\\">\\n            <Tile>\\n              <Form>\\n                <TextInput\\n                  id=\\\"name\\\"\\n                  name=\\\"name\\\"\\n                  value={this.state.name || \\\"\\\"}\\n                  onChange={this.saveData}\\n                  labelText=\\\"Name\\\"\\n                  maxLength=\\\"100\\\"\\n                  invalid={this.state.nameInvalid}\\n                  invalidText=\\\"Please enter a name..\\\"\\n                />\\n                <br />\\n                <br />\\n                <TextInput\\n                  id=\\\"address\\\"\\n                  name=\\\"address\\\"\\n                  value={this.state.address || \\\"\\\"}\\n                  onChange={this.saveData}\\n                  labelText=\\\"Address\\\"\\n                  maxLength=\\\"200\\\"\\n                  invalid={this.state.addressInvalid}\\n                  invalidText=\\\"Please enter an address..\\\"\\n                />\\n                <br />\\n                <br />\\n                <TextInput\\n                  id=\\\"city\\\"\\n                  name=\\\"city\\\"\\n                  value={this.state.city || \\\"\\\"}\\n                  onChange={this.saveData}\\n                  labelText=\\\"City\\\"\\n                  maxLength=\\\"100\\\"\\n                  invalid={this.state.cityInvalid}\\n                  invalidText=\\\"Please enter a city..\\\"\\n                />\\n                <br />\\n                <br />\\n                <p className=\\\"bx--label left-align\\\">State</p>\\n                <DropdownV2\\n                  id=\\\"state\\\"\\n                  label=\\\"Select a state..\\\"\\n                  ariaLabel=\\\"Select a state..\\\"\\n                  items={[\\n                    \\\"AL\\\",\\n                    \\\"AK\\\",\\n                    \\\"AS\\\",\\n                    \\\"AZ\\\",\\n                    \\\"AR\\\",\\n                    \\\"CA\\\",\\n                    \\\"CO\\\",\\n                    \\\"CT\\\",\\n                    \\\"DE\\\",\\n                    \\\"DC\\\",\\n                    \\\"FM\\\",\\n                    \\\"FL\\\",\\n                    \\\"GA\\\",\\n                    \\\"GU\\\",\\n                    \\\"HI\\\",\\n                    \\\"ID\\\",\\n                    \\\"IL\\\",\\n                    \\\"IN\\\",\\n                    \\\"IA\\\",\\n                    \\\"KS\\\",\\n                    \\\"KY\\\",\\n                    \\\"LA\\\",\\n                    \\\"ME\\\",\\n                    \\\"MH\\\",\\n                    \\\"MD\\\",\\n                    \\\"MA\\\",\\n                    \\\"MI\\\",\\n                    \\\"MN\\\",\\n                    \\\"MS\\\",\\n                    \\\"MO\\\",\\n                    \\\"MT\\\",\\n                    \\\"NE\\\",\\n                    \\\"NV\\\",\\n                    \\\"NH\\\",\\n                    \\\"NJ\\\",\\n                    \\\"NM\\\",\\n                    \\\"NY\\\",\\n                    \\\"NC\\\",\\n                    \\\"ND\\\",\\n                    \\\"MP\\\",\\n                    \\\"OH\\\",\\n                    \\\"OK\\\",\\n                    \\\"OR\\\",\\n                    \\\"PW\\\",\\n                    \\\"PA\\\",\\n                    \\\"PR\\\",\\n                    \\\"RI\\\",\\n                    \\\"SC\\\",\\n                    \\\"SD\\\",\\n                    \\\"TN\\\",\\n                    \\\"TX\\\",\\n                    \\\"UT\\\",\\n                    \\\"VT\\\",\\n                    \\\"VI\\\",\\n                    \\\"VA\\\",\\n                    \\\"WA\\\",\\n                    \\\"WV\\\",\\n                    \\\"WI\\\",\\n                    \\\"WY\\\",\\n                    \\\"Other\\\"\\n                  ]}\\n                  selectedItem={this.state.state}\\n                  onChange={this.saveDataDropdown1}\\n                />\\n                {this.state.stateInvalid && (\\n                  <p className=\\\"dropdown-invalid\\\">Please select a state..</p>\\n                )}\\n                <br />\\n                <br />\\n                <TextInput\\n                  id=\\\"zipCode\\\"\\n                  name=\\\"zipCode\\\"\\n                  value={this.state.zipCode || \\\"\\\"}\\n                  onChange={this.saveData}\\n                  labelText=\\\"Zip Code\\\"\\n                  maxLength=\\\"20\\\"\\n                  invalid={this.state.zipCodeInvalid}\\n                  invalidText=\\\"Please enter a valid zip code..\\\"\\n                />\\n                <br />\\n                <br />\\n                <p className=\\\"bx--label left-align\\\">Country</p>\\n                <DropdownV2\\n                  id=\\\"country\\\"\\n                  label=\\\"Select a country..\\\"\\n                  ariaLabel=\\\"Select a country..\\\"\\n                  items={[\\\"United States\\\", \\\"Other\\\"]}\\n                  selectedItem={this.state.country}\\n                  onChange={this.saveDataDropdown2}\\n                />\\n                {this.state.countryInvalid && (\\n                  <p className=\\\"dropdown-invalid\\\">Please select a country..</p>\\n                )}\\n                <br />\\n                <br />\\n                <div className=\\\"left-align\\\">\\n                  {showDescription && (\\n                    <Button onClick={this.saveForm}>Submit</Button>\\n                  )}\\n                  {!showDescription && (\\n                    <Button onClick={this.saveForm}>\\n                      {this.props.adding ? \\\"Add\\\" : \\\"Update\\\"}\\n                    </Button>\\n                  )}\\n                </div>\\n              </Form>\\n            </Tile>\\n          </div>\\n        </div>\\n        <br />\\n        <br />\\n        {Object.keys(this.state.dataToSave).length > 0 && (\\n          <div className=\\\"bx--row\\\">\\n            <div className=\\\"bx--col-xs-12 left-align\\\">\\n              <Tile>\\n                {Object.keys(this.state.dataToSave).map(item => (\\n                  <p>\\n                    &nbsp;&nbsp;\\n                    <strong>\\n                      {item.charAt(0).toUpperCase() +\\n                        item.slice(1).replace(/([A-Z])/g, \\\" $1\\\")}\\n                      :\\n                    </strong>{\\\" \\\"}\\n                    {this.state.dataToSave[item]}\\n                  </p>\\n                ))}\\n              </Tile>\\n              <br />\\n              <br />\\n            </div>\\n          </div>\\n        )}\\n      </div>\\n    );\\n  }\\n}\\nexport default ValidatingForm;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport {\\n  TextInput,\\n  Form,\\n  DropdownV2,\\n  Button,\\n  Tile\\n} from \\\"carbon-components-react\\\";\\nimport Header from \\\"./Header\\\";\\nimport \\\"./patterns.scss\\\";\\n\\nlet checkFlag = true;\\n\\nclass UpdateForm extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      dataToSave: {},\\n      name: \\\"John Doe\\\",\\n      address: \\\"123 Main Street\\\",\\n      city: \\\"Anytown\\\",\\n      state: \\\"TX\\\",\\n      zipCode: \\\"12345\\\",\\n      country: \\\"United States\\\"\\n    };\\n  }\\n\\n  componentDidMount() {\\n    let dataToSave = {\\n      name: this.state.name,\\n      address: this.state.address,\\n      city: this.state.city,\\n      state: this.state.state,\\n      zipCode: this.state.zipCode,\\n      country: this.state.country\\n    };\\n    this.setState({ dataToSave });\\n  }\\n\\n  saveData = event => {\\n    const target = event.target;\\n    let fieldName = target.name;\\n    let fieldValue = target.value;\\n    if (!fieldValue) {\\n      this.setState({ [fieldName]: fieldValue, [fieldName + \\\"Invalid\\\"]: true });\\n    } else {\\n      this.setState({\\n        [fieldName]: fieldValue,\\n        [fieldName + \\\"Invalid\\\"]: false\\n      });\\n    }\\n  };\\n\\n  saveDataDropdown1 = ({ selectedItem }) => {\\n    this.setState({ state: selectedItem, stateInvalid: false });\\n  };\\n\\n  saveDataDropdown2 = ({ selectedItem }) => {\\n    this.setState({ country: selectedItem, countryInvalid: false });\\n  };\\n\\n  checkForm = () => {\\n    checkFlag = true;\\n    if (!this.state.name) {\\n      this.setState({ nameInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.address) {\\n      this.setState({ addressInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.city) {\\n      this.setState({ cityInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.state) {\\n      this.setState({ stateInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (\\n      !this.state.zipCode ||\\n      (this.state.country === \\\"United States\\\" &&\\n        !/(^\\\\d{5}$)|(^\\\\d{5}-\\\\d{4}$)/.test(this.state.zipCode))\\n    ) {\\n      this.setState({ zipCodeInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.country) {\\n      this.setState({ countryInvalid: true });\\n      checkFlag = false;\\n    }\\n    return checkFlag;\\n  };\\n\\n  saveForm = event => {\\n    event.preventDefault();\\n    if (this.checkForm()) {\\n      let dataToSave = {\\n        name: this.state.name,\\n        address: this.state.address,\\n        city: this.state.city,\\n        state: this.state.state,\\n        zipCode: this.state.zipCode,\\n        country: this.state.country\\n      };\\n      this.setState({ dataToSave });\\n    }\\n  };\\n\\n  render() {\\n    return (\\n      <div className=\\\"bx--grid pattern-container\\\">\\n        <Header\\n          title=\\\"Update Form\\\"\\n          subtitle=\\\"Update form is based on the Display\\n            Form pattern but will display model data and then validate ready for\\n            it to be updated.\\\"\\n        />\\n        <div className=\\\"bx--row\\\">\\n          <div className=\\\"bx--col-xs-12\\\">\\n            <Tile>\\n              <Form>\\n                <TextInput\\n                  id=\\\"name\\\"\\n                  name=\\\"name\\\"\\n                  value={this.state.name || \\\"\\\"}\\n                  onChange={this.saveData}\\n                  labelText=\\\"Name\\\"\\n                  maxLength=\\\"100\\\"\\n                  invalid={this.state.nameInvalid}\\n                  invalidText=\\\"Please enter a name..\\\"\\n                />\\n                <br />\\n                <br />\\n                <TextInput\\n                  id=\\\"address\\\"\\n                  name=\\\"address\\\"\\n                  value={this.state.address || \\\"\\\"}\\n                  onChange={this.saveData}\\n                  labelText=\\\"Address\\\"\\n                  maxLength=\\\"200\\\"\\n                  invalid={this.state.addressInvalid}\\n                  invalidText=\\\"Please enter an address..\\\"\\n                />\\n                <br />\\n                <br />\\n                <TextInput\\n                  id=\\\"city\\\"\\n                  name=\\\"city\\\"\\n                  value={this.state.city || \\\"\\\"}\\n                  onChange={this.saveData}\\n                  labelText=\\\"City\\\"\\n                  maxLength=\\\"100\\\"\\n                  invalid={this.state.cityInvalid}\\n                  invalidText=\\\"Please enter a city..\\\"\\n                />\\n                <br />\\n                <br />\\n                <p className=\\\"bx--label left-align\\\">State</p>\\n                <DropdownV2\\n                  id=\\\"state\\\"\\n                  label=\\\"Select a state..\\\"\\n                  ariaLabel=\\\"Select a state..\\\"\\n                  items={[\\n                    \\\"AL\\\",\\n                    \\\"AK\\\",\\n                    \\\"AS\\\",\\n                    \\\"AZ\\\",\\n                    \\\"AR\\\",\\n                    \\\"CA\\\",\\n                    \\\"CO\\\",\\n                    \\\"CT\\\",\\n                    \\\"DE\\\",\\n                    \\\"DC\\\",\\n                    \\\"FM\\\",\\n                    \\\"FL\\\",\\n                    \\\"GA\\\",\\n                    \\\"GU\\\",\\n                    \\\"HI\\\",\\n                    \\\"ID\\\",\\n                    \\\"IL\\\",\\n                    \\\"IN\\\",\\n                    \\\"IA\\\",\\n                    \\\"KS\\\",\\n                    \\\"KY\\\",\\n                    \\\"LA\\\",\\n                    \\\"ME\\\",\\n                    \\\"MH\\\",\\n                    \\\"MD\\\",\\n                    \\\"MA\\\",\\n                    \\\"MI\\\",\\n                    \\\"MN\\\",\\n                    \\\"MS\\\",\\n                    \\\"MO\\\",\\n                    \\\"MT\\\",\\n                    \\\"NE\\\",\\n                    \\\"NV\\\",\\n                    \\\"NH\\\",\\n                    \\\"NJ\\\",\\n                    \\\"NM\\\",\\n                    \\\"NY\\\",\\n                    \\\"NC\\\",\\n                    \\\"ND\\\",\\n                    \\\"MP\\\",\\n                    \\\"OH\\\",\\n                    \\\"OK\\\",\\n                    \\\"OR\\\",\\n                    \\\"PW\\\",\\n                    \\\"PA\\\",\\n                    \\\"PR\\\",\\n                    \\\"RI\\\",\\n                    \\\"SC\\\",\\n                    \\\"SD\\\",\\n                    \\\"TN\\\",\\n                    \\\"TX\\\",\\n                    \\\"UT\\\",\\n                    \\\"VT\\\",\\n                    \\\"VI\\\",\\n                    \\\"VA\\\",\\n                    \\\"WA\\\",\\n                    \\\"WV\\\",\\n                    \\\"WI\\\",\\n                    \\\"WY\\\",\\n                    \\\"Other\\\"\\n                  ]}\\n                  selectedItem={this.state.state}\\n                  onChange={this.saveDataDropdown1}\\n                />\\n                {this.state.stateInvalid && (\\n                  <p className=\\\"dropdown-invalid\\\">Please select a state..</p>\\n                )}\\n                <br />\\n                <br />\\n                <TextInput\\n                  id=\\\"zipCode\\\"\\n                  name=\\\"zipCode\\\"\\n                  value={this.state.zipCode || \\\"\\\"}\\n                  onChange={this.saveData}\\n                  labelText=\\\"Zip Code\\\"\\n                  maxLength=\\\"20\\\"\\n                  invalid={this.state.zipCodeInvalid}\\n                  invalidText=\\\"Please enter a valid zip code..\\\"\\n                />\\n                <br />\\n                <br />\\n                <p className=\\\"bx--label left-align\\\">Country</p>\\n                <DropdownV2\\n                  id=\\\"country\\\"\\n                  label=\\\"Select a country..\\\"\\n                  ariaLabel=\\\"Select a country..\\\"\\n                  items={[\\\"United States\\\", \\\"Other\\\"]}\\n                  selectedItem={this.state.country}\\n                  onChange={this.saveDataDropdown2}\\n                />\\n                {this.state.countryInvalid && (\\n                  <p className=\\\"dropdown-invalid\\\">Please select a country..</p>\\n                )}\\n                <br />\\n                <br />\\n                <div className=\\\"left-align\\\">\\n                  <Button onClick={this.saveForm}>Update</Button>\\n                </div>\\n              </Form>\\n            </Tile>\\n          </div>\\n        </div>\\n        <br />\\n        <br />\\n        {Object.keys(this.state.dataToSave).length > 0 && (\\n          <div className=\\\"bx--row\\\">\\n            <div className=\\\"bx--col-xs-12 left-align\\\">\\n              <Tile>\\n                {Object.keys(this.state.dataToSave).map(item => (\\n                  <p key={item}>\\n                    &nbsp;&nbsp;\\n                    <strong>\\n                      {item.charAt(0).toUpperCase() +\\n                        item.slice(1).replace(/([A-Z])/g, \\\" $1\\\")}\\n                      :\\n                    </strong>{\\\" \\\"}\\n                    {this.state.dataToSave[item]}\\n                  </p>\\n                ))}\\n              </Tile>\\n              <br />\\n              <br />\\n            </div>\\n          </div>\\n        )}\\n      </div>\\n    );\\n  }\\n}\\nexport default UpdateForm;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport {\\n  TextInput,\\n  Form,\\n  DropdownV2,\\n  Button,\\n  Tile,\\n  Tabs,\\n  Tab\\n} from \\\"carbon-components-react\\\";\\nimport Header from \\\"./Header\\\";\\nimport \\\"./patterns.scss\\\";\\n\\nlet checkFlag = true;\\n\\nclass ValidatingFormWizard1 extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      dataToSave: {},\\n      selectedTab: 0\\n    };\\n  }\\n\\n  onSelectionChange = tabId => {\\n    this.setState({ selectedTab: tabId });\\n  };\\n\\n  nextTab = () => {\\n    if (this.checkFormTab1()) {\\n      this.setState(prevState => ({ selectedTab: prevState.selectedTab + 1 }));\\n    }\\n  };\\n\\n  saveData = event => {\\n    const target = event.target;\\n    let fieldName = target.name;\\n    let fieldValue = target.value;\\n    if (!fieldValue) {\\n      this.setState({ [fieldName]: fieldValue, [fieldName + \\\"Invalid\\\"]: true });\\n    } else {\\n      this.setState({\\n        [fieldName]: fieldValue,\\n        [fieldName + \\\"Invalid\\\"]: false\\n      });\\n    }\\n  };\\n\\n  saveDataDropdown1 = ({ selectedItem }) => {\\n    this.setState({ state: selectedItem, stateInvalid: false });\\n  };\\n\\n  saveDataDropdown2 = ({ selectedItem }) => {\\n    this.setState({ country: selectedItem, countryInvalid: false });\\n  };\\n\\n  checkFormTab1 = () => {\\n    checkFlag = true;\\n    if (!this.state.firstName) {\\n      this.setState({ firstNameInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.lastName) {\\n      this.setState({ lastNameInvalid: true });\\n      checkFlag = false;\\n    }\\n    return checkFlag;\\n  };\\n\\n  checkForm = () => {\\n    checkFlag = true;\\n    if (!this.state.firstName) {\\n      this.setState({ firstNameInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.lastName) {\\n      this.setState({ lastNameInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.streetAddress) {\\n      this.setState({ streetAddressInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.city) {\\n      this.setState({ cityInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.state) {\\n      this.setState({ stateInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (\\n      !this.state.zipCode ||\\n      (this.state.country === \\\"United States\\\" &&\\n        !/(^\\\\d{5}$)|(^\\\\d{5}-\\\\d{4}$)/.test(this.state.zipCode))\\n    ) {\\n      this.setState({ zipCodeInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.country) {\\n      this.setState({ countryInvalid: true });\\n      checkFlag = false;\\n    }\\n    return checkFlag;\\n  };\\n\\n  saveForm = event => {\\n    event.preventDefault();\\n    if (this.checkForm()) {\\n      let dataToSave = {\\n        firstName: this.state.firstName,\\n        middleName: this.state.middleName,\\n        lastName: this.state.lastName,\\n        streetAddress: this.state.streetAddress,\\n        city: this.state.city,\\n        state: this.state.state,\\n        zipCode: this.state.zipCode,\\n        country: this.state.country\\n      };\\n      this.setState({ dataToSave });\\n    }\\n  };\\n\\n  render() {\\n    return (\\n      <div className=\\\"bx--grid pattern-container\\\">\\n        <Header\\n          title=\\\"Validating Form Wizard 1\\\"\\n          subtitle=\\\"The Validating Form Wizard is based on the Validating Form pattern but displays a large form in the style of Paged Wizard, Tabbed Page or Individual Pages. This will depend on the channel device characteristics.\\\"\\n        />\\n        <div className=\\\"bx--row\\\">\\n          <div className=\\\"bx--col-xs-12\\\">\\n            <Tile>\\n              <Form>\\n                <Tabs\\n                  selected={this.state.selectedTab}\\n                  onSelectionChange={this.onSelectionChange}\\n                >\\n                  <Tab label=\\\"Name\\\">\\n                    <div>\\n                      <br />\\n                      <TextInput\\n                        id=\\\"firstName\\\"\\n                        name=\\\"firstName\\\"\\n                        value={this.state.firstName || \\\"\\\"}\\n                        onChange={this.saveData}\\n                        labelText=\\\"First Name\\\"\\n                        maxLength=\\\"100\\\"\\n                        invalid={this.state.firstNameInvalid}\\n                        invalidText=\\\"Please enter a first name..\\\"\\n                      />\\n                      <br />\\n                      <br />\\n                      <TextInput\\n                        id=\\\"middleName\\\"\\n                        name=\\\"middleName\\\"\\n                        value={this.state.middleName || \\\"\\\"}\\n                        onChange={this.saveData}\\n                        labelText=\\\"Middle Name\\\"\\n                        maxLength=\\\"100\\\"\\n                      />\\n                      <br />\\n                      <br />\\n                      <TextInput\\n                        id=\\\"lastName\\\"\\n                        name=\\\"lastName\\\"\\n                        value={this.state.lastName || \\\"\\\"}\\n                        onChange={this.saveData}\\n                        labelText=\\\"Last Name\\\"\\n                        maxLength=\\\"100\\\"\\n                        invalid={this.state.lastNameInvalid}\\n                        invalidText=\\\"Please enter a last name..\\\"\\n                      />\\n                      <br />\\n                      <br />\\n                      <div className=\\\"left-align\\\">\\n                        <Button onClick={this.nextTab}>Next</Button>\\n                      </div>\\n                    </div>\\n                  </Tab>\\n                  <Tab label=\\\"Address\\\">\\n                    <div>\\n                      <br />\\n                      <TextInput\\n                        id=\\\"streetAddress\\\"\\n                        name=\\\"streetAddress\\\"\\n                        value={this.state.streetAddress || \\\"\\\"}\\n                        onChange={this.saveData}\\n                        labelText=\\\"Street Address\\\"\\n                        maxLength=\\\"200\\\"\\n                        invalid={this.state.streetAddressInvalid}\\n                        invalidText=\\\"Please enter an address..\\\"\\n                      />\\n                      <br />\\n                      <br />\\n                      <TextInput\\n                        id=\\\"city\\\"\\n                        name=\\\"city\\\"\\n                        value={this.state.city || \\\"\\\"}\\n                        onChange={this.saveData}\\n                        labelText=\\\"City\\\"\\n                        maxLength=\\\"100\\\"\\n                        invalid={this.state.cityInvalid}\\n                        invalidText=\\\"Please enter a city..\\\"\\n                      />\\n                      <br />\\n                      <br />\\n                      <p className=\\\"bx--label left-align\\\">State</p>\\n                      <DropdownV2\\n                        id=\\\"state\\\"\\n                        label=\\\"Select a state..\\\"\\n                        ariaLabel=\\\"Select a state..\\\"\\n                        items={[\\n                          \\\"AL\\\",\\n                          \\\"AK\\\",\\n                          \\\"AS\\\",\\n                          \\\"AZ\\\",\\n                          \\\"AR\\\",\\n                          \\\"CA\\\",\\n                          \\\"CO\\\",\\n                          \\\"CT\\\",\\n                          \\\"DE\\\",\\n                          \\\"DC\\\",\\n                          \\\"FM\\\",\\n                          \\\"FL\\\",\\n                          \\\"GA\\\",\\n                          \\\"GU\\\",\\n                          \\\"HI\\\",\\n                          \\\"ID\\\",\\n                          \\\"IL\\\",\\n                          \\\"IN\\\",\\n                          \\\"IA\\\",\\n                          \\\"KS\\\",\\n                          \\\"KY\\\",\\n                          \\\"LA\\\",\\n                          \\\"ME\\\",\\n                          \\\"MH\\\",\\n                          \\\"MD\\\",\\n                          \\\"MA\\\",\\n                          \\\"MI\\\",\\n                          \\\"MN\\\",\\n                          \\\"MS\\\",\\n                          \\\"MO\\\",\\n                          \\\"MT\\\",\\n                          \\\"NE\\\",\\n                          \\\"NV\\\",\\n                          \\\"NH\\\",\\n                          \\\"NJ\\\",\\n                          \\\"NM\\\",\\n                          \\\"NY\\\",\\n                          \\\"NC\\\",\\n                          \\\"ND\\\",\\n                          \\\"MP\\\",\\n                          \\\"OH\\\",\\n                          \\\"OK\\\",\\n                          \\\"OR\\\",\\n                          \\\"PW\\\",\\n                          \\\"PA\\\",\\n                          \\\"PR\\\",\\n                          \\\"RI\\\",\\n                          \\\"SC\\\",\\n                          \\\"SD\\\",\\n                          \\\"TN\\\",\\n                          \\\"TX\\\",\\n                          \\\"UT\\\",\\n                          \\\"VT\\\",\\n                          \\\"VI\\\",\\n                          \\\"VA\\\",\\n                          \\\"WA\\\",\\n                          \\\"WV\\\",\\n                          \\\"WI\\\",\\n                          \\\"WY\\\",\\n                          \\\"Other\\\"\\n                        ]}\\n                        selectedItem={this.state.state}\\n                        onChange={this.saveDataDropdown1}\\n                      />\\n                      {this.state.stateInvalid && (\\n                        <p className=\\\"dropdown-invalid\\\">\\n                          Please select a state..\\n                        </p>\\n                      )}\\n                      <br />\\n                      <br />\\n                      <TextInput\\n                        id=\\\"zipCode\\\"\\n                        name=\\\"zipCode\\\"\\n                        value={this.state.zipCode || \\\"\\\"}\\n                        onChange={this.saveData}\\n                        labelText=\\\"Zip Code\\\"\\n                        maxLength=\\\"20\\\"\\n                        invalid={this.state.zipCodeInvalid}\\n                        invalidText=\\\"Please enter a valid zip code..\\\"\\n                      />\\n                      <br />\\n                      <br />\\n                      <p className=\\\"bx--label left-align\\\">Country</p>\\n                      <DropdownV2\\n                        id=\\\"country\\\"\\n                        label=\\\"Select a country..\\\"\\n                        ariaLabel=\\\"Select a country..\\\"\\n                        items={[\\\"United States\\\", \\\"Other\\\"]}\\n                        selectedItem={this.state.country}\\n                        onChange={this.saveDataDropdown2}\\n                      />\\n                      {this.state.countryInvalid && (\\n                        <p className=\\\"dropdown-invalid\\\">\\n                          Please select a country..\\n                        </p>\\n                      )}\\n                      <br />\\n                      <br />\\n                      <div className=\\\"left-align\\\">\\n                        <Button onClick={this.saveForm}>Submit</Button>\\n                      </div>\\n                    </div>\\n                  </Tab>\\n                </Tabs>\\n              </Form>\\n            </Tile>\\n          </div>\\n        </div>\\n        <br />\\n        <br />\\n        {Object.keys(this.state.dataToSave).length > 0 && (\\n          <div className=\\\"bx--row\\\">\\n            <div className=\\\"bx--col-xs-12 left-align\\\">\\n              <Tile>\\n                {Object.keys(this.state.dataToSave).map(item => (\\n                  <p>\\n                    &nbsp;&nbsp;\\n                    <strong>\\n                      {item.charAt(0).toUpperCase() +\\n                        item.slice(1).replace(/([A-Z])/g, \\\" $1\\\")}\\n                      :\\n                    </strong>{\\\" \\\"}\\n                    {this.state.dataToSave[item]}\\n                  </p>\\n                ))}\\n              </Tile>\\n              <br />\\n              <br />\\n            </div>\\n          </div>\\n        )}\\n      </div>\\n    );\\n  }\\n}\\nexport default ValidatingFormWizard1;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport {\\n  TextInput,\\n  Form,\\n  DropdownV2,\\n  Button,\\n  Tile\\n} from \\\"carbon-components-react\\\";\\nimport Header from \\\"./Header\\\";\\nimport \\\"./patterns.scss\\\";\\n\\nlet checkFlag = true;\\n\\nclass ValidatingFormWizard2 extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      dataToSave: {},\\n      selectedTab: 0\\n    };\\n  }\\n\\n  prevTab = () => {\\n    this.setState(prevState => ({ selectedTab: prevState.selectedTab - 1 }));\\n  };\\n\\n  nextTab = () => {\\n    if (this.checkFormTab1()) {\\n      this.setState(prevState => ({ selectedTab: prevState.selectedTab + 1 }));\\n    }\\n  };\\n\\n  saveData = event => {\\n    const target = event.target;\\n    let fieldName = target.name;\\n    let fieldValue = target.value;\\n    if (!fieldValue) {\\n      this.setState({ [fieldName]: fieldValue, [fieldName + \\\"Invalid\\\"]: true });\\n    } else {\\n      this.setState({\\n        [fieldName]: fieldValue,\\n        [fieldName + \\\"Invalid\\\"]: false\\n      });\\n    }\\n  };\\n\\n  saveDataDropdown1 = ({ selectedItem }) => {\\n    this.setState({ state: selectedItem, stateInvalid: false });\\n  };\\n\\n  saveDataDropdown2 = ({ selectedItem }) => {\\n    this.setState({ country: selectedItem, countryInvalid: false });\\n  };\\n\\n  checkFormTab1 = () => {\\n    checkFlag = true;\\n    if (!this.state.firstName) {\\n      this.setState({ firstNameInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.lastName) {\\n      this.setState({ lastNameInvalid: true });\\n      checkFlag = false;\\n    }\\n    return checkFlag;\\n  };\\n\\n  checkForm = () => {\\n    checkFlag = true;\\n    if (!this.state.firstName) {\\n      this.setState({ firstNameInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.lastName) {\\n      this.setState({ lastNameInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.streetAddress) {\\n      this.setState({ streetAddressInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.city) {\\n      this.setState({ cityInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.state) {\\n      this.setState({ stateInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (\\n      !this.state.zipCode ||\\n      (this.state.country === \\\"United States\\\" &&\\n        !/(^\\\\d{5}$)|(^\\\\d{5}-\\\\d{4}$)/.test(this.state.zipCode))\\n    ) {\\n      this.setState({ zipCodeInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.country) {\\n      this.setState({ countryInvalid: true });\\n      checkFlag = false;\\n    }\\n    return checkFlag;\\n  };\\n\\n  saveForm = event => {\\n    event.preventDefault();\\n    if (this.checkForm()) {\\n      let dataToSave = {\\n        firstName: this.state.firstName,\\n        middleName: this.state.middleName,\\n        lastName: this.state.lastName,\\n        streetAddress: this.state.streetAddress,\\n        city: this.state.city,\\n        state: this.state.state,\\n        zipCode: this.state.zipCode,\\n        country: this.state.country\\n      };\\n      this.setState({ dataToSave });\\n    }\\n  };\\n\\n  render() {\\n    return (\\n      <div className=\\\"bx--grid pattern-container\\\">\\n        <Header\\n          title=\\\"Validating Form Wizard 2\\\"\\n          subtitle=\\\"The Validating Form Wizard is based on the Validating Form pattern but displays a large form in the style of Paged Wizard, Tabbed Page or Individual Pages. This will depend on the channel device characteristics.\\\"\\n        />\\n        <div className=\\\"bx--row\\\">\\n          <div className=\\\"bx--col-xs-12\\\">\\n            <Tile>\\n              <Form>\\n                {this.state.selectedTab === 0 && (\\n                  <div>\\n                    <br />\\n                    <TextInput\\n                      id=\\\"firstName\\\"\\n                      name=\\\"firstName\\\"\\n                      value={this.state.firstName || \\\"\\\"}\\n                      onChange={this.saveData}\\n                      labelText=\\\"First Name\\\"\\n                      maxLength=\\\"100\\\"\\n                      invalid={this.state.firstNameInvalid}\\n                      invalidText=\\\"Please enter a first name..\\\"\\n                    />\\n                    <br />\\n                    <br />\\n                    <TextInput\\n                      id=\\\"middleName\\\"\\n                      name=\\\"middleName\\\"\\n                      value={this.state.middleName || \\\"\\\"}\\n                      onChange={this.saveData}\\n                      labelText=\\\"Middle Name\\\"\\n                      maxLength=\\\"100\\\"\\n                    />\\n                    <br />\\n                    <br />\\n                    <TextInput\\n                      id=\\\"lastName\\\"\\n                      name=\\\"lastName\\\"\\n                      value={this.state.lastName || \\\"\\\"}\\n                      onChange={this.saveData}\\n                      labelText=\\\"Last Name\\\"\\n                      maxLength=\\\"100\\\"\\n                      invalid={this.state.lastNameInvalid}\\n                      invalidText=\\\"Please enter a last name..\\\"\\n                    />\\n                    <br />\\n                    <br />\\n                    <div className=\\\"left-align\\\">\\n                      Page 1 of 2\\n                      <br />\\n                      <br />\\n                      <Button onClick={this.nextTab}>Next</Button>\\n                    </div>\\n                  </div>\\n                )}\\n                {this.state.selectedTab === 1 && (\\n                  <div>\\n                    <br />\\n                    <TextInput\\n                      id=\\\"streetAddress\\\"\\n                      name=\\\"streetAddress\\\"\\n                      value={this.state.streetAddress || \\\"\\\"}\\n                      onChange={this.saveData}\\n                      labelText=\\\"Street Address\\\"\\n                      maxLength=\\\"200\\\"\\n                      invalid={this.state.streetAddressInvalid}\\n                      invalidText=\\\"Please enter an address..\\\"\\n                    />\\n                    <br />\\n                    <br />\\n                    <TextInput\\n                      id=\\\"city\\\"\\n                      name=\\\"city\\\"\\n                      value={this.state.city || \\\"\\\"}\\n                      onChange={this.saveData}\\n                      labelText=\\\"City\\\"\\n                      maxLength=\\\"100\\\"\\n                      invalid={this.state.cityInvalid}\\n                      invalidText=\\\"Please enter a city..\\\"\\n                    />\\n                    <br />\\n                    <br />\\n                    <p className=\\\"bx--label left-align\\\">State</p>\\n                    <DropdownV2\\n                      id=\\\"state\\\"\\n                      label=\\\"Select a state..\\\"\\n                      ariaLabel=\\\"Select a state..\\\"\\n                      items={[\\n                        \\\"AL\\\",\\n                        \\\"AK\\\",\\n                        \\\"AS\\\",\\n                        \\\"AZ\\\",\\n                        \\\"AR\\\",\\n                        \\\"CA\\\",\\n                        \\\"CO\\\",\\n                        \\\"CT\\\",\\n                        \\\"DE\\\",\\n                        \\\"DC\\\",\\n                        \\\"FM\\\",\\n                        \\\"FL\\\",\\n                        \\\"GA\\\",\\n                        \\\"GU\\\",\\n                        \\\"HI\\\",\\n                        \\\"ID\\\",\\n                        \\\"IL\\\",\\n                        \\\"IN\\\",\\n                        \\\"IA\\\",\\n                        \\\"KS\\\",\\n                        \\\"KY\\\",\\n                        \\\"LA\\\",\\n                        \\\"ME\\\",\\n                        \\\"MH\\\",\\n                        \\\"MD\\\",\\n                        \\\"MA\\\",\\n                        \\\"MI\\\",\\n                        \\\"MN\\\",\\n                        \\\"MS\\\",\\n                        \\\"MO\\\",\\n                        \\\"MT\\\",\\n                        \\\"NE\\\",\\n                        \\\"NV\\\",\\n                        \\\"NH\\\",\\n                        \\\"NJ\\\",\\n                        \\\"NM\\\",\\n                        \\\"NY\\\",\\n                        \\\"NC\\\",\\n                        \\\"ND\\\",\\n                        \\\"MP\\\",\\n                        \\\"OH\\\",\\n                        \\\"OK\\\",\\n                        \\\"OR\\\",\\n                        \\\"PW\\\",\\n                        \\\"PA\\\",\\n                        \\\"PR\\\",\\n                        \\\"RI\\\",\\n                        \\\"SC\\\",\\n                        \\\"SD\\\",\\n                        \\\"TN\\\",\\n                        \\\"TX\\\",\\n                        \\\"UT\\\",\\n                        \\\"VT\\\",\\n                        \\\"VI\\\",\\n                        \\\"VA\\\",\\n                        \\\"WA\\\",\\n                        \\\"WV\\\",\\n                        \\\"WI\\\",\\n                        \\\"WY\\\",\\n                        \\\"Other\\\"\\n                      ]}\\n                      selectedItem={this.state.state}\\n                      onChange={this.saveDataDropdown1}\\n                    />\\n                    {this.state.stateInvalid && (\\n                      <p className=\\\"dropdown-invalid\\\">\\n                        Please select a state..\\n                      </p>\\n                    )}\\n                    <br />\\n                    <br />\\n                    <TextInput\\n                      id=\\\"zipCode\\\"\\n                      name=\\\"zipCode\\\"\\n                      value={this.state.zipCode || \\\"\\\"}\\n                      onChange={this.saveData}\\n                      labelText=\\\"Zip Code\\\"\\n                      maxLength=\\\"20\\\"\\n                      invalid={this.state.zipCodeInvalid}\\n                      invalidText=\\\"Please enter a valid zip code..\\\"\\n                    />\\n                    <br />\\n                    <br />\\n                    <p className=\\\"bx--label left-align\\\">Country</p>\\n                    <DropdownV2\\n                      id=\\\"country\\\"\\n                      label=\\\"Select a country..\\\"\\n                      ariaLabel=\\\"Select a country..\\\"\\n                      items={[\\\"United States\\\", \\\"Other\\\"]}\\n                      selectedItem={this.state.country}\\n                      onChange={this.saveDataDropdown2}\\n                    />\\n                    {this.state.countryInvalid && (\\n                      <p className=\\\"dropdown-invalid\\\">\\n                        Please select a country..\\n                      </p>\\n                    )}\\n                    <br />\\n                    <br />\\n                    <div className=\\\"left-align\\\">\\n                      Page 2 of 2\\n                      <br />\\n                      <br />\\n                      <Button onClick={this.prevTab}>Previous</Button>\\n                      &nbsp;&nbsp;&nbsp;&nbsp;\\n                      <Button onClick={this.saveForm}>Submit</Button>\\n                    </div>\\n                  </div>\\n                )}\\n              </Form>\\n            </Tile>\\n          </div>\\n        </div>\\n        <br />\\n        <br />\\n        {Object.keys(this.state.dataToSave).length > 0 && (\\n          <div className=\\\"bx--row\\\">\\n            <div className=\\\"bx--col-xs-12 left-align\\\">\\n              <Tile>\\n                {Object.keys(this.state.dataToSave).map(item => (\\n                  <p>\\n                    &nbsp;&nbsp;\\n                    <strong>\\n                      {item.charAt(0).toUpperCase() +\\n                        item.slice(1).replace(/([A-Z])/g, \\\" $1\\\")}\\n                      :\\n                    </strong>{\\\" \\\"}\\n                    {this.state.dataToSave[item]}\\n                  </p>\\n                ))}\\n              </Tile>\\n              <br />\\n              <br />\\n            </div>\\n          </div>\\n        )}\\n      </div>\\n    );\\n  }\\n}\\nexport default ValidatingFormWizard2;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport {\\n  StructuredListWrapper,\\n  StructuredListRow,\\n  StructuredListCell,\\n  StructuredListHead,\\n  StructuredListBody,\\n  StructuredListInput,\\n  Icon\\n} from \\\"carbon-components-react\\\";\\nimport { iconCheckmarkSolid } from \\\"carbon-icons\\\";\\nimport Header from \\\"./Header\\\";\\nimport \\\"./patterns.scss\\\";\\n\\nclass SimpleList extends Component {\\n  columns = ['SecretName', 'SecretValue'];\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      items: [],\\n      selectedRow: 0,\\n      hidden: true,\\n    };\\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\\n    this.toggleShow = this.toggleShow.bind(this);\\n  }\\n\\n  onRowClick = id => {\\n    this.setState({ selectedRow: id });\\n  };\\n  handlePasswordChange(e) {\\n    this.setState({ password: e.target.value });\\n  }\\n\\n  toggleShow() {\\n    this.setState({ hidden: !this.state.hidden });\\n  }\\n\\n  componentDidMount() {\\n    const apiUrl = '/health';\\n    fetch(apiUrl)\\n      .then((response) => response.json())\\n      .then((data) => {\\n        console.log(data)\\n        this.setState({ items: data });\\n      });\\n  }\\n  renderTableHeader() {\\n    let header = [\\\"SecretName\\\", \\\"SecretValue\\\", \\\"Action\\\"]\\n    return header.map((key, index) => {\\n      return <th key={index}>{key.toUpperCase()}</th>\\n    })\\n  }\\n\\n  render() {\\n    console.log(this.state.items);\\n    return (\\n      <div>\\n        <h1 id='title' class=\\\"pattern-title\\\">Secrets</h1>\\n        <table id='students'>\\n          <tbody>\\n            <tr>{this.renderTableHeader()}</tr>\\n            {this.renderTableData()}\\n          </tbody>\\n        </table>\\n      </div>\\n    )\\n  }\\n  renderTableData() {\\n\\n    return this.state.items.map((student, index) => {\\n      console.log(index)\\n      const { SecretName, SecretValue } = student //destructuring\\n      if (index == 1) {\\n        return (\\n          <tr>\\n            <td>{SecretName}</td>\\n            <td>\\n              <input\\n                type={this.state.hidden ? \\\"password\\\" : \\\"text\\\"}\\n                value={SecretValue}\\n                onChange={this.handlePasswordChange}\\n              />\\n            </td>\\n            <td>\\n              <button onClick={this.toggleShow}>Show / Hide</button>\\n            </td>\\n          </tr>\\n        )\\n      } else {\\n        return (\\n          <tr>\\n            <td>{SecretName}</td>\\n            <td>{SecretValue}</td>\\n            <td>NA</td>\\n          </tr>\\n        )\\n      }\\n\\n    })\\n  }\\n\\n\\n}\\n\\nexport default SimpleList;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport {\\n  StructuredListWrapper,\\n  StructuredListRow,\\n  StructuredListCell,\\n  StructuredListHead,\\n  StructuredListBody,\\n  StructuredListInput,\\n  Icon\\n} from \\\"carbon-components-react\\\";\\nimport { iconCheckmarkSolid } from \\\"carbon-icons\\\";\\nimport Header from \\\"./Header\\\";\\nimport \\\"./patterns.scss\\\";\\n\\nclass TableList extends Component {\\n  title = 'Table List';\\n  subtitle = 'This pattern will display and array of model objects in a multi column grid/table.';\\n\\n  columns = ['Name', 'Address', 'City', 'State', 'ZipCode', 'Country'];\\n  formatters = {\\n    'ZipCode': function (val) {\\n      return val + '-0000';\\n    }\\n  };\\n\\n  data = [\\n    {\\n      Name: \\\"Lin\\\",\\n      Address: \\\"123 Main Street\\\",\\n      City: \\\"Austin\\\",\\n      State: \\\"TX\\\",\\n      ZipCode: \\\"12345\\\",\\n      Country: \\\"United States\\\"\\n    },\\n    {\\n      Name: \\\"Mak\\\",\\n      Address: \\\"45 2nd Street\\\",\\n      City: \\\"Austin\\\",\\n      State: \\\"TX\\\",\\n      ZipCode: \\\"78766\\\",\\n      Country: \\\"United States\\\"\\n    },\\n    {\\n      Name: \\\"Joe\\\",\\n      Address: \\\"40 Down Street\\\",\\n      City: \\\"San Francisco\\\",\\n      State: \\\"CA\\\",\\n      ZipCode: \\\"90706\\\",\\n      Country: \\\"United States\\\"\\n    }\\n  ];\\n\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      data: [],\\n      selectedRow: 0,\\n    };\\n  }\\n\\n  async componentDidMount() {\\n\\n    this.setState({\\n      data: this.data,\\n    })\\n  }\\n\\n  onRowClick = id => {\\n    this.setState({ selectedRow: id });\\n  };\\n\\n  renderRow = (row, id) => {\\n    return (\\n      <StructuredListRow key={id} onClick={() => this.onRowClick(id)}>\\n        <div>\\n          <StructuredListInput\\n            id={`row-${id}`}\\n            value=\\\"row-0\\\"\\n            title=\\\"row-0\\\"\\n            name=\\\"row-0\\\"\\n            //defaultChecked={this.state.selectedRow === id}\\n            checked={this.state.selectedRow === id}\\n          />\\n          <StructuredListCell>\\n            <Icon\\n              className=\\\"bx--structured-list-svg\\\"\\n              icon={iconCheckmarkSolid}\\n            />\\n          </StructuredListCell>\\n        </div>\\n        {this.columns.map(col => {\\n          const format = this.formatters[col] || function (val) { return val; };\\n\\n          return (\\n            <StructuredListCell key={col} className=\\\"simple-list-row\\\">\\n              {format(row[col])}\\n            </StructuredListCell>\\n          );\\n        })}\\n      </StructuredListRow>\\n    );\\n  };\\n\\n  render() {\\n    const data = this.state.data;\\n\\n    return (\\n      <div className=\\\"bx--grid pattern-container\\\">\\n        <Header\\n          title={this.title}\\n          subtitle={this.subtitle}\\n        />\\n        <div className=\\\"bx--row\\\">\\n          <div className=\\\"bx--col-xs-12\\\">\\n            <StructuredListWrapper selection border>\\n              <StructuredListHead>\\n                <StructuredListRow head>\\n                  <StructuredListCell head />\\n                  {this.columns.map(key => {\\n                    return (\\n                      <StructuredListCell head key={key}>\\n                        {key.charAt(0).toUpperCase() +\\n                          key.slice(1).replace(/([A-Z])/g, \\\" $1\\\")}\\n                      </StructuredListCell>\\n                    );\\n                  })}\\n                </StructuredListRow>\\n              </StructuredListHead>\\n\\n              <StructuredListBody>\\n                {data.map((row, i) => {\\n                  return this.renderRow(row, i);\\n                })}\\n              </StructuredListBody>\\n            </StructuredListWrapper>\\n          </div>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default TableList;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport { DataTable, Button } from \\\"carbon-components-react\\\";\\nimport Header from \\\"./Header\\\";\\nimport \\\"./patterns.scss\\\";\\n\\nconst {\\n  Table,\\n  TableBody,\\n  TableCell,\\n  TableContainer,\\n  TableHead,\\n  TableHeader,\\n  TableRow,\\n  TableSelectAll,\\n  TableSelectRow\\n} = DataTable;\\n\\nclass ListToList extends Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      rowsListA: [\\n        {\\n          id: \\\"aa\\\",\\n          name: \\\"Load Balancer 1\\\",\\n          port: 25\\n        },\\n        {\\n          id: \\\"ab\\\",\\n          name: \\\"Load Balancer 2\\\",\\n          port: 80\\n        },\\n        {\\n          id: \\\"ac\\\",\\n          name: \\\"Load Balancer 3\\\",\\n          port: 443\\n        }\\n      ],\\n      rowsListB: [\\n        {\\n          id: \\\"ba\\\",\\n          name: \\\"Load Balancer 4\\\",\\n          port: 3000\\n        },\\n        {\\n          id: \\\"bb\\\",\\n          name: \\\"Load Balancer 5\\\",\\n          port: 4000\\n        },\\n        {\\n          id: \\\"bc\\\",\\n          name: \\\"Load Balancer 6\\\",\\n          port: 5000\\n        }\\n      ],\\n      headers: [\\n        {\\n          key: \\\"name\\\",\\n          header: \\\"Name\\\"\\n        },\\n        {\\n          key: \\\"port\\\",\\n          header: \\\"Port\\\"\\n        }\\n      ]\\n    };\\n  }\\n\\n  selectedRowsListA = [];\\n  selectedRowsListB = [];\\n\\n  moveFromListAToB = event => {\\n    let rowsListA = this.state.rowsListA.slice();\\n    let rowsListB = this.state.rowsListB.slice();\\n    this.selectedRowsListA.forEach(elem => {\\n      rowsListA = rowsListA.filter(item => {\\n        if (item.id !== elem.id) {\\n          return true;\\n        } else {\\n          rowsListB.push(item);\\n          return false;\\n        }\\n      });\\n    });\\n    this.setState({ rowsListA, rowsListB });\\n  };\\n\\n  moveFromListBToA = event => {\\n    let rowsListA = this.state.rowsListA.slice();\\n    let rowsListB = this.state.rowsListB.slice();\\n    this.selectedRowsListB.forEach(elem => {\\n      rowsListB = rowsListB.filter(item => {\\n        if (item.id !== elem.id) {\\n          return true;\\n        } else {\\n          rowsListA.push(item);\\n          return false;\\n        }\\n      });\\n    });\\n    this.setState({ rowsListA, rowsListB });\\n  };\\n\\n  render() {\\n    return (\\n      <div className=\\\"bx--grid pattern-container\\\">\\n        <Header\\n          title=\\\"List To List\\\"\\n          subtitle=\\\"This pattern is based on a Simple list pattern but will display two lists and allow the moving of data from one list to another and back again.\\\"\\n        />\\n        <div className=\\\"bx--row\\\">\\n          <div className=\\\"bx--col-xs-12 bx--col-lg-5\\\">\\n            <DataTable\\n              rows={this.state.rowsListA}\\n              headers={this.state.headers}\\n              render={({\\n                rows,\\n                headers,\\n                getHeaderProps,\\n                getRowProps,\\n                getSelectionProps,\\n                selectedRows\\n              }) => {\\n                this.selectedRowsListA = selectedRows;\\n                return (\\n                  <TableContainer title=\\\"List A\\\">\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow>\\n                          <TableSelectAll {...getSelectionProps()} />\\n                          {headers.map(header => (\\n                            <TableHeader {...getHeaderProps({ header })}>\\n                              {header.header}\\n                            </TableHeader>\\n                          ))}\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        {rows.map(row => (\\n                          <TableRow {...getRowProps({ row })}>\\n                            <TableSelectRow {...getSelectionProps({ row })} />\\n                            {row.cells.map(cell => (\\n                              <TableCell key={cell.id}>{cell.value}</TableCell>\\n                            ))}\\n                          </TableRow>\\n                        ))}\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                );\\n              }}\\n            />\\n          </div>\\n          <div className=\\\"bx--col-xs-12 bx--col-lg-2 list-to-list-moving-btn-container\\\">\\n            <div>\\n              <Button\\n                className=\\\"list-to-list-moving-btn\\\"\\n                onClick={this.moveFromListAToB}\\n              >\\n                &gt;&gt;\\n              </Button>\\n              <br />\\n              <Button\\n                className=\\\"list-to-list-moving-btn\\\"\\n                onClick={this.moveFromListBToA}\\n              >\\n                &lt;&lt;\\n              </Button>\\n            </div>\\n          </div>\\n          <div className=\\\"bx--col-xs-12 bx--col-lg-5\\\">\\n            <DataTable\\n              rows={this.state.rowsListB}\\n              headers={this.state.headers}\\n              render={({\\n                rows,\\n                headers,\\n                getHeaderProps,\\n                getRowProps,\\n                getSelectionProps,\\n                selectedRows\\n              }) => {\\n                this.selectedRowsListB = selectedRows;\\n                return (\\n                  <TableContainer title=\\\"List B\\\">\\n                    <Table>\\n                      <TableHead>\\n                        <TableRow>\\n                          <TableSelectAll {...getSelectionProps()} />\\n                          {headers.map(header => (\\n                            <TableHeader {...getHeaderProps({ header })}>\\n                              {header.header}\\n                            </TableHeader>\\n                          ))}\\n                        </TableRow>\\n                      </TableHead>\\n                      <TableBody>\\n                        {rows.map(row => (\\n                          <TableRow {...getRowProps({ row })}>\\n                            <TableSelectRow {...getSelectionProps({ row })} />\\n                            {row.cells.map(cell => (\\n                              <TableCell key={cell.id}>{cell.value}</TableCell>\\n                            ))}\\n                          </TableRow>\\n                        ))}\\n                      </TableBody>\\n                    </Table>\\n                  </TableContainer>\\n                );\\n              }}\\n            />\\n          </div>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\nexport default ListToList;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport { Form, DropdownV2, Button, Tile } from \\\"carbon-components-react\\\";\\nimport Header from \\\"./Header\\\";\\nimport \\\"./patterns.scss\\\";\\n\\nlet checkFlag = true;\\n\\nclass LinkedList extends Component {\\n  constructor(props) {\\n    super(props);\\n    const data = {\\n      \\\"United States\\\": {\\n        TX: [\\\"Austin\\\", \\\"Dallas\\\", \\\"Other\\\"],\\n        CA: [\\\"San Francisco\\\", \\\"Los Angeles\\\", \\\"Other\\\"],\\n        Other: [\\\"Other\\\"]\\n      },\\n      Mexico: {\\n        Aguascalientes: [\\\"Aguascalientes\\\", \\\"Calvillo\\\", \\\"Other\\\"],\\n        \\\"Baja California\\\": [\\\"Tijuana\\\", \\\"Mexicali\\\", \\\"Other\\\"],\\n        Other: [\\\"Other\\\"]\\n      }\\n    };\\n    this.state = {\\n      data,\\n      dataToSave: {},\\n      countryList: Object.keys(data),\\n      stateList: [],\\n      cityList: []\\n    };\\n  }\\n\\n  saveData = event => {\\n    const target = event.target;\\n    let fieldName = target.name;\\n    let fieldValue = target.value;\\n    if (!fieldValue) {\\n      this.setState({ [fieldName]: fieldValue, [fieldName + \\\"Invalid\\\"]: true });\\n    } else {\\n      this.setState({\\n        [fieldName]: fieldValue,\\n        [fieldName + \\\"Invalid\\\"]: false\\n      });\\n    }\\n  };\\n\\n  saveDataDropdown1 = ({ selectedItem }) => {\\n    this.setState({\\n      country: selectedItem,\\n      countryInvalid: false,\\n      state: \\\"\\\",\\n      city: \\\"\\\",\\n      stateList: Object.keys(this.state.data[selectedItem])\\n    });\\n  };\\n\\n  saveDataDropdown2 = ({ selectedItem }) => {\\n    this.setState({\\n      state: selectedItem,\\n      stateInvalid: false,\\n      city: \\\"\\\",\\n      cityList: this.state.data[this.state.country][selectedItem]\\n    });\\n  };\\n\\n  saveDataDropdown3 = ({ selectedItem }) => {\\n    this.setState({\\n      city: selectedItem,\\n      cityInvalid: false\\n    });\\n  };\\n\\n  checkForm = () => {\\n    checkFlag = true;\\n    if (!this.state.country) {\\n      this.setState({ countryInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.state) {\\n      this.setState({ stateInvalid: true });\\n      checkFlag = false;\\n    }\\n    if (!this.state.city) {\\n      this.setState({ cityInvalid: true });\\n      checkFlag = false;\\n    }\\n    return checkFlag;\\n  };\\n\\n  saveForm = event => {\\n    event.preventDefault();\\n    if (this.checkForm()) {\\n      let dataToSave = {\\n        country: this.state.country,\\n        state: this.state.state,\\n        city: this.state.city\\n      };\\n      this.setState({ dataToSave });\\n    }\\n  };\\n\\n  render() {\\n    return (\\n      <div className=\\\"bx--grid pattern-container\\\">\\n        <Header\\n          title=\\\"Linked List\\\"\\n          subtitle=\\\"This pattern will link multiple list or combo controls together so when a selection on one list is made it may change the information displayed in the other linked list.\\\"\\n        />\\n        <div className=\\\"bx--row\\\">\\n          <div className=\\\"bx--col-xs-12\\\">\\n            <Tile>\\n              <Form>\\n                <p className=\\\"bx--label left-align\\\">Country</p>\\n                <DropdownV2\\n                  id=\\\"country\\\"\\n                  label=\\\"Select a country..\\\"\\n                  ariaLabel=\\\"Select a country..\\\"\\n                  items={this.state.countryList}\\n                  selectedItem={this.state.country}\\n                  onChange={this.saveDataDropdown1}\\n                />\\n                {this.state.countryInvalid && (\\n                  <p className=\\\"dropdown-invalid\\\">Please select a country..</p>\\n                )}\\n                <br />\\n                <br />\\n                <p className=\\\"bx--label left-align\\\">State</p>\\n                <DropdownV2\\n                  id=\\\"state\\\"\\n                  label=\\\"Select a state..\\\"\\n                  ariaLabel=\\\"Select a state..\\\"\\n                  items={this.state.stateList}\\n                  selectedItem={this.state.state}\\n                  onChange={this.saveDataDropdown2}\\n                />\\n                {this.state.stateInvalid && (\\n                  <p className=\\\"dropdown-invalid\\\">Please select a state..</p>\\n                )}\\n                <br />\\n                <br />\\n                <p className=\\\"bx--label left-align\\\">City</p>\\n                <DropdownV2\\n                  id=\\\"city\\\"\\n                  label=\\\"Select a city..\\\"\\n                  ariaLabel=\\\"Select a city..\\\"\\n                  items={this.state.cityList}\\n                  selectedItem={this.state.city}\\n                  onChange={this.saveDataDropdown3}\\n                />\\n                {this.state.cityInvalid && (\\n                  <p className=\\\"dropdown-invalid\\\">Please select a city..</p>\\n                )}\\n                <br />\\n                <br />\\n                <div className=\\\"left-align\\\">\\n                  <Button onClick={this.saveForm}>Submit</Button>\\n                </div>\\n              </Form>\\n            </Tile>\\n          </div>\\n        </div>\\n        <br />\\n        <br />\\n        {Object.keys(this.state.dataToSave).length > 0 && (\\n          <div className=\\\"bx--row\\\">\\n            <div className=\\\"bx--col-xs-12 left-align\\\">\\n              <Tile>\\n                {Object.keys(this.state.dataToSave).map(item => (\\n                  <p key={item}>\\n                    &nbsp;&nbsp;\\n                    <strong>\\n                      {item.charAt(0).toUpperCase() + item.slice(1)}:\\n                    </strong>{\\\" \\\"}\\n                    {this.state.dataToSave[item]}\\n                  </p>\\n                ))}\\n              </Tile>\\n              <br />\\n              <br />\\n            </div>\\n          </div>\\n        )}\\n      </div>\\n    );\\n  }\\n}\\nexport default LinkedList;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport {\\n  StructuredListWrapper,\\n  StructuredListRow,\\n  StructuredListCell,\\n  StructuredListHead,\\n  StructuredListBody,\\n  StructuredListInput,\\n  Icon\\n} from \\\"carbon-components-react\\\";\\nimport { iconCheckmarkSolid } from \\\"carbon-icons\\\";\\nimport Header from \\\"./Header\\\";\\nimport DisplayForm from \\\"./DisplayForm\\\";\\nimport \\\"./patterns.scss\\\";\\n\\nclass MasterDetail extends Component {\\n  constructor(props) {\\n    super(props);\\n    const data = [\\n      [\\n        { label: \\\"Name\\\", value: \\\"Lin\\\", type: \\\"textinput\\\" },\\n        { label: \\\"Address\\\", value: \\\"123 Main Street\\\", type: \\\"textinput\\\" },\\n        { label: \\\"City\\\", value: \\\"Austin\\\", type: \\\"textinput\\\" },\\n        { label: \\\"State\\\", value: [\\\"TX\\\"], type: \\\"dropdown\\\" },\\n        { label: \\\"ZipCode\\\", value: \\\"12345\\\", type: \\\"textinput\\\" },\\n        { label: \\\"Country\\\", value: [\\\"United States\\\"], type: \\\"dropdown\\\" }\\n      ],\\n      [\\n        { label: \\\"Name\\\", value: \\\"Mak\\\", type: \\\"textinput\\\" },\\n        { label: \\\"Address\\\", value: \\\"45 2nd Street\\\", type: \\\"textinput\\\" },\\n        { label: \\\"City\\\", value: \\\"Austin\\\", type: \\\"textinput\\\" },\\n        { label: \\\"State\\\", value: [\\\"TX\\\"], type: \\\"dropdown\\\" },\\n        { label: \\\"ZipCode\\\", value: \\\"78766\\\", type: \\\"textinput\\\" },\\n        { label: \\\"Country\\\", value: [\\\"United States\\\"], type: \\\"dropdown\\\" }\\n      ],\\n      [\\n        { label: \\\"Name\\\", value: \\\"Joe\\\", type: \\\"textinput\\\" },\\n        { label: \\\"Address\\\", value: \\\"40 Down Street\\\", type: \\\"textinput\\\" },\\n        { label: \\\"City\\\", value: \\\"San Francisco\\\", type: \\\"textinput\\\" },\\n        { label: \\\"State\\\", value: [\\\"CA\\\"], type: \\\"dropdown\\\" },\\n        { label: \\\"ZipCode\\\", value: \\\"90706\\\", type: \\\"textinput\\\" },\\n        { label: \\\"Country\\\", value: [\\\"United States\\\"], type: \\\"dropdown\\\" }\\n      ]\\n    ];\\n    this.state = {\\n      selectedRow: 0,\\n      data\\n    };\\n  }\\n\\n  onRowClick = id => {\\n    this.setState({ selectedRow: id });\\n  };\\n\\n  renderRow = (row, id) => {\\n    return (\\n      <StructuredListRow key={id} onClick={() => this.onRowClick(id)}>\\n        <div>\\n          <StructuredListInput\\n            id={`row-${id}`}\\n            value=\\\"row-0\\\"\\n            title=\\\"row-0\\\"\\n            name=\\\"row-0\\\"\\n            checked={this.state.selectedRow === id}\\n          />\\n          <StructuredListCell>\\n            <Icon\\n              className=\\\"bx--structured-list-svg\\\"\\n              icon={iconCheckmarkSolid}\\n            />\\n          </StructuredListCell>\\n        </div>\\n        {Object.keys(row).map(col => {\\n          return (\\n            <StructuredListCell key={col} className=\\\"simple-list-row\\\">\\n              {row[col]}\\n            </StructuredListCell>\\n          );\\n        })}\\n      </StructuredListRow>\\n    );\\n  };\\n\\n  render() {\\n    const selectedRow = this.state.selectedRow;\\n    const data = this.state.data;\\n    const columns = data[selectedRow].map(item => item.label);\\n\\n    return (\\n      <div className=\\\"bx--grid \\\">\\n        <Header\\n          title=\\\"Master Detail\\\"\\n          subtitle=\\\"This pattern will use a simple list of table list and link to a display form.\\\"\\n        />\\n        <div className=\\\"bx--row\\\">\\n          <div className=\\\"bx--col-xs-12\\\">\\n            <StructuredListWrapper selection border>\\n              <StructuredListHead>\\n                <StructuredListRow head>\\n                  <StructuredListCell head />\\n                  {columns.map(key => {\\n                    return (\\n                      <StructuredListCell head key={key}>\\n                        {key.charAt(0).toUpperCase() +\\n                          key.slice(1).replace(/([A-Z])/g, \\\" $1\\\")}\\n                      </StructuredListCell>\\n                    );\\n                  })}\\n                </StructuredListRow>\\n              </StructuredListHead>\\n              <StructuredListBody>\\n                {data.map((row, i) => {\\n                  const values = row.map(item => item.value);\\n                  return this.renderRow(values, i);\\n                })}\\n              </StructuredListBody>\\n            </StructuredListWrapper>\\n          </div>\\n        </div>\\n        <DisplayForm data={data[selectedRow]} />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default MasterDetail;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport {\\n  StructuredListWrapper,\\n  StructuredListRow,\\n  StructuredListCell,\\n  StructuredListHead,\\n  StructuredListBody,\\n  StructuredListInput,\\n  Icon,\\n  Button\\n} from \\\"carbon-components-react\\\";\\nimport { iconCheckmarkSolid } from \\\"carbon-icons\\\";\\nimport Header from \\\"./Header\\\";\\nimport ValidatingForm from \\\"./ValidatingForm\\\";\\nimport \\\"./patterns.scss\\\";\\n\\nclass CreateReadUpdateDelete extends Component {\\n  constructor(props) {\\n    super(props);\\n    const data = [\\n      [\\n        { label: \\\"Name\\\", value: \\\"Lin\\\", type: \\\"textinput\\\" },\\n        { label: \\\"Address\\\", value: \\\"123 Main Street\\\", type: \\\"textinput\\\" },\\n        { label: \\\"City\\\", value: \\\"Austin\\\", type: \\\"textinput\\\" },\\n        { label: \\\"State\\\", value: [\\\"TX\\\"], type: \\\"dropdown\\\" },\\n        { label: \\\"ZipCode\\\", value: \\\"12345\\\", type: \\\"textinput\\\" },\\n        { label: \\\"Country\\\", value: [\\\"United States\\\"], type: \\\"dropdown\\\" }\\n      ],\\n      [\\n        { label: \\\"Name\\\", value: \\\"Mak\\\", type: \\\"textinput\\\" },\\n        { label: \\\"Address\\\", value: \\\"45 2nd Street\\\", type: \\\"textinput\\\" },\\n        { label: \\\"City\\\", value: \\\"Austin\\\", type: \\\"textinput\\\" },\\n        { label: \\\"State\\\", value: [\\\"TX\\\"], type: \\\"dropdown\\\" },\\n        { label: \\\"ZipCode\\\", value: \\\"78766\\\", type: \\\"textinput\\\" },\\n        { label: \\\"Country\\\", value: [\\\"United States\\\"], type: \\\"dropdown\\\" }\\n      ],\\n      [\\n        { label: \\\"Name\\\", value: \\\"Joe\\\", type: \\\"textinput\\\" },\\n        { label: \\\"Address\\\", value: \\\"40 Down Street\\\", type: \\\"textinput\\\" },\\n        { label: \\\"City\\\", value: \\\"San Francisco\\\", type: \\\"textinput\\\" },\\n        { label: \\\"State\\\", value: [\\\"CA\\\"], type: \\\"dropdown\\\" },\\n        { label: \\\"ZipCode\\\", value: \\\"90706\\\", type: \\\"textinput\\\" },\\n        { label: \\\"Country\\\", value: [\\\"United States\\\"], type: \\\"dropdown\\\" }\\n      ]\\n    ];\\n    this.state = {\\n      selectedRow: 0,\\n      data,\\n      adding: false\\n    };\\n  }\\n\\n  onRowClick = id => {\\n    this.setState({ selectedRow: id });\\n  };\\n\\n  addRow = () => {\\n    let data = this.state.data.slice();\\n    let selectedRow = this.state.data.length;\\n    data[selectedRow] = [\\n      { label: \\\"Name\\\", value: \\\"Enter data below\\\", type: \\\"textinput\\\" },\\n      { label: \\\"Address\\\", value: \\\"\\\", type: \\\"textinput\\\" },\\n      { label: \\\"City\\\", value: \\\"\\\", type: \\\"textinput\\\" },\\n      { label: \\\"State\\\", value: [\\\"\\\"], type: \\\"dropdown\\\" },\\n      { label: \\\"ZipCode\\\", value: \\\"\\\", type: \\\"textinput\\\" },\\n      { label: \\\"Country\\\", value: [\\\"\\\"], type: \\\"dropdown\\\" }\\n    ];\\n    this.setState({ data, selectedRow, adding: true });\\n  };\\n\\n  deleteRow = () => {\\n    let data = this.state.data.slice();\\n    if (data.length > 0) {\\n      data.splice(this.state.selectedRow, 1);\\n      this.setState({ data, selectedRow: 0 });\\n    }\\n  };\\n\\n  updateRow = newData => {\\n    let data = this.state.data.slice();\\n    let selectedRow = this.state.selectedRow;\\n    data[selectedRow] = [\\n      { label: \\\"Name\\\", value: newData.name, type: \\\"textinput\\\" },\\n      { label: \\\"Address\\\", value: newData.address, type: \\\"textinput\\\" },\\n      { label: \\\"City\\\", value: newData.city, type: \\\"textinput\\\" },\\n      { label: \\\"State\\\", value: [newData.state], type: \\\"dropdown\\\" },\\n      { label: \\\"ZipCode\\\", value: newData.zipCode, type: \\\"textinput\\\" },\\n      { label: \\\"Country\\\", value: [newData.country], type: \\\"dropdown\\\" }\\n    ];\\n    this.setState({ data });\\n  };\\n\\n  toggleAdding = () => {\\n    const adding = this.state.adding;\\n    this.setState({ adding: !adding });\\n  };\\n\\n  renderRow = (row, id) => {\\n    return (\\n      <StructuredListRow key={id} onClick={() => this.onRowClick(id)}>\\n        <div>\\n          <StructuredListInput\\n            id={`row-${id}`}\\n            value=\\\"row-0\\\"\\n            title=\\\"row-0\\\"\\n            name=\\\"row-0\\\"\\n            checked={this.state.selectedRow === id}\\n          />\\n          <StructuredListCell>\\n            <Icon\\n              className=\\\"bx--structured-list-svg\\\"\\n              icon={iconCheckmarkSolid}\\n            />\\n          </StructuredListCell>\\n        </div>\\n        {Object.keys(row).map(col => {\\n          return (\\n            <StructuredListCell key={col} className=\\\"simple-list-row\\\">\\n              {row[col]}\\n            </StructuredListCell>\\n          );\\n        })}\\n      </StructuredListRow>\\n    );\\n  };\\n\\n  render() {\\n    const selectedRow = this.state.selectedRow;\\n    const data = this.state.data;\\n    const columns = data.length\\n      ? data[selectedRow].map(item => item.label)\\n      : [];\\n\\n    return (\\n      <div className=\\\"bx--grid pattern-container\\\">\\n        <Header\\n          title=\\\"Create, Read, Update, Delete\\\"\\n          subtitle=\\\"This composite pattern is build from the Table List pattern and uses the Validating Form pattern for creating items, Update Form pattern for Update.\\\"\\n        />\\n        <div className=\\\"bx--row\\\">\\n          <div className=\\\"bx--col-xs-12\\\">\\n            <StructuredListWrapper selection border>\\n              <StructuredListHead>\\n                <StructuredListRow head>\\n                  <StructuredListCell head />\\n                  {columns.map(key => {\\n                    return (\\n                      <StructuredListCell head key={key}>\\n                        {key.charAt(0).toUpperCase() +\\n                          key.slice(1).replace(/([A-Z])/g, \\\" $1\\\")}\\n                      </StructuredListCell>\\n                    );\\n                  })}\\n                </StructuredListRow>\\n              </StructuredListHead>\\n              <StructuredListBody>\\n                {data.map((row, i) => {\\n                  const values = row.map(item => item.value);\\n                  return this.renderRow(values, i);\\n                })}\\n              </StructuredListBody>\\n            </StructuredListWrapper>\\n          </div>\\n        </div>\\n        <div className=\\\"bx--row left-align\\\">\\n          <div className=\\\"bx--col-xs-12\\\">\\n            <Button className=\\\"add-delete-row-buttons\\\" onClick={this.addRow}>\\n              Add Row\\n            </Button>\\n            <Button className=\\\"add-delete-row-buttons\\\" onClick={this.deleteRow}>\\n              Delete Row\\n            </Button>\\n          </div>\\n        </div>\\n        <br />\\n        <br />\\n        {data.length > 0 && (\\n          <div className=\\\"bx--row\\\">\\n            <div className=\\\"bx--col-xs-12\\\">\\n              <ValidatingForm\\n                data={data[selectedRow]}\\n                updateRow={this.updateRow}\\n                adding={this.state.adding}\\n                toggleAdding={this.toggleAdding}\\n              />\\n            </div>\\n          </div>\\n        )}\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default CreateReadUpdateDelete;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport { Search, DataTable } from \\\"carbon-components-react\\\";\\nimport Header from \\\"./Header\\\";\\nimport \\\"./patterns.scss\\\";\\n\\nconst {\\n  Table,\\n  TableBody,\\n  TableCell,\\n  TableContainer,\\n  TableHead,\\n  TableHeader,\\n  TableRow\\n} = DataTable;\\n\\nclass SearchList extends Component {\\n  constructor(props) {\\n    super(props);\\n    const rowsList = [\\n      {\\n        id: \\\"1\\\",\\n        name: \\\"Load Balancer 1\\\",\\n        port: \\\"25\\\",\\n        status: \\\"Disabled\\\"\\n      },\\n      {\\n        id: \\\"2\\\",\\n        name: \\\"Load Balancer 2\\\",\\n        port: \\\"80\\\",\\n        status: \\\"Starting\\\"\\n      },\\n      {\\n        id: \\\"3\\\",\\n        name: \\\"Load Balancer 3\\\",\\n        port: \\\"443\\\",\\n        status: \\\"Active\\\"\\n      }\\n    ];\\n    this.state = {\\n      searchKeyword: \\\"\\\",\\n      initialRowsList: rowsList,\\n      rowsList: rowsList,\\n      headers: [\\n        {\\n          key: \\\"name\\\",\\n          header: \\\"Name\\\"\\n        },\\n        {\\n          key: \\\"port\\\",\\n          header: \\\"Port\\\"\\n        },\\n        {\\n          key: \\\"status\\\",\\n          header: \\\"Status\\\"\\n        }\\n      ]\\n    };\\n  }\\n\\n  onSearch = event => {\\n    this.setState({ searchKeyword: event.target.value }, () => {\\n      const subset = this.state.initialRowsList.filter(datarow =>\\n        Object.keys(datarow).reduce((accumulator, field) => {\\n          return (\\n            accumulator ||\\n            datarow[field]\\n              .toLocaleLowerCase()\\n              .includes(this.state.searchKeyword.toLocaleLowerCase())\\n          );\\n        }, false)\\n      );\\n      this.setState({ rowsList: subset });\\n    });\\n  };\\n\\n  render() {\\n    return (\\n      <div className=\\\"bx--grid pattern-container\\\">\\n        <Header\\n          title=\\\"Search List\\\"\\n          subtitle=\\\"This pattern uses a Validating Form pattern linked to a Table List pattern for display of the items that have been searched for.\\\"\\n        />\\n        <div className=\\\"bx--row\\\">\\n          <div className=\\\"bx--col-xs-12\\\">\\n            <Search\\n              value={this.state.searchKeyword}\\n              labelText=\\\"Search\\\"\\n              closeButtonLabelText=\\\"\\\"\\n              placeHolderText=\\\"Search\\\"\\n              onChange={this.onSearch}\\n              id=\\\"search-1\\\"\\n              light={true}\\n            />\\n          </div>\\n        </div>\\n        <br />\\n        <br />\\n        <div className=\\\"bx--row\\\">\\n          <div className=\\\"bx--col-xs-12\\\">\\n            {this.state.rowsList.length !== 0 && (\\n              <DataTable\\n                rows={this.state.rowsList}\\n                headers={this.state.headers}\\n                render={({\\n                  rows,\\n                  headers,\\n                  getHeaderProps,\\n                  getRowProps,\\n                  getSelectionProps\\n                }) => {\\n                  return (\\n                    <TableContainer title=\\\"\\\">\\n                      <Table>\\n                        <TableHead>\\n                          <TableRow>\\n                            {headers.map(header => (\\n                              <TableHeader {...getHeaderProps({ header })}>\\n                                {header.header}\\n                              </TableHeader>\\n                            ))}\\n                          </TableRow>\\n                        </TableHead>\\n                        <TableBody>\\n                          {rows.map(row => (\\n                            <TableRow {...getRowProps({ row })}>\\n                              {row.cells.map(cell => (\\n                                <TableCell key={cell.id}>\\n                                  {cell.value}\\n                                </TableCell>\\n                              ))}\\n                            </TableRow>\\n                          ))}\\n                        </TableBody>\\n                      </Table>\\n                    </TableContainer>\\n                  );\\n                }}\\n              />\\n            )}\\n            {this.state.rowsList.length === 0 && (\\n              <p className=\\\"center-align\\\">No matching result</p>\\n            )}\\n          </div>\\n        </div>\\n        <br />\\n        <br />\\n      </div>\\n    );\\n  }\\n}\\nexport default SearchList;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport DisplayForm from \\\"../pattern-components/DisplayForm\\\";\\nimport ValidatingForm from \\\"../pattern-components/ValidatingForm\\\";\\nimport UpdateForm from \\\"../pattern-components/UpdateForm\\\";\\nimport ValidatingFormWizard1 from \\\"../pattern-components/ValidatingFormWizard1\\\";\\nimport ValidatingFormWizard2 from \\\"../pattern-components/ValidatingFormWizard2\\\";\\nimport SimpleList from \\\"../pattern-components/SimpleList\\\";\\nimport TableList from \\\"../pattern-components/TableList\\\";\\nimport ListToList from \\\"../pattern-components/ListToList\\\";\\nimport LinkedList from \\\"../pattern-components/LinkedList\\\";\\nimport MasterDetail from \\\"../pattern-components/MasterDetail\\\";\\nimport CreateReadUpdateDelete from \\\"../pattern-components/CreateReadUpdateDelete\\\";\\nimport SearchList from \\\"../pattern-components/SearchList\\\";\\nimport SearchForm from \\\"../pattern-components/SearchForm\\\";\\nimport \\\"../pattern-components/patterns.scss\\\";\\n\\nclass UIShellBody extends Component {\\n  components = {\\n    \\\"Secrets\\\": SimpleList\\n  };\\n  defaultComponent = \\\"Display Form\\\";\\n\\n  render() {\\n    const PatternName = this.components[\\n      this.props.patternName || this.defaultComponent\\n    ];\\n    return (\\n      <div className=\\\"pattern-container\\\">\\n        <PatternName showDescription={true} />\\n      </div>\\n    );\\n  }\\n}\\nexport default UIShellBody;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport { Search } from \\\"carbon-components-react\\\";\\nimport \\\"./patterns.scss\\\";\\nimport Header from \\\"./Header\\\";\\nimport DisplayForm from \\\"./DisplayForm\\\";\\n\\nclass SearchForm extends Component {\\n  constructor(props) {\\n    super(props);\\n    const defaultData = [\\n      {\\n        Name: \\\"Lin\\\",\\n        Address: \\\"123 Main Street\\\",\\n        City: \\\"Austin\\\",\\n        State: \\\"TX\\\",\\n        ZipCode: \\\"12345\\\",\\n        Country: \\\"USA\\\"\\n      },\\n      {\\n        Name: \\\"Mak\\\",\\n        Address: \\\"45 2nd Street\\\",\\n        City: \\\"Austin\\\",\\n        State: \\\"TX\\\",\\n        ZipCode: \\\"78766\\\",\\n        Country: \\\"USA\\\"\\n      },\\n      {\\n        Name: \\\"Joe\\\",\\n        Address: \\\"40 Down Street\\\",\\n        City: \\\"San Francisco\\\",\\n        State: \\\"CA\\\",\\n        ZipCode: \\\"90706\\\",\\n        Country: \\\"USA\\\"\\n      }\\n    ];\\n    this.state = {\\n      searchKeyword: \\\"\\\",\\n      data: defaultData\\n    };\\n  }\\n\\n  formatDataForDisplayForm = datarow => {\\n    const displayData = Object.keys(datarow).map(label => {\\n      return { label, value: datarow[label], type: \\\"textinput\\\" };\\n    });\\n    return displayData;\\n  };\\n\\n  onSearch = event => {\\n    this.setState({ searchKeyword: event.target.value });\\n  };\\n\\n  getFilteredData = data => {\\n    const subset = data.filter(datarow =>\\n      Object.keys(datarow).reduce((accumulator, field) => {\\n        return (\\n          accumulator ||\\n          datarow[field]\\n            .toLocaleLowerCase()\\n            .includes(this.state.searchKeyword.toLocaleLowerCase())\\n        );\\n      }, false)\\n    );\\n    return subset;\\n  };\\n\\n  render() {\\n    const data = this.state.data;\\n    const filteredData = this.getFilteredData(data);\\n\\n    return (\\n      <div className=\\\"bx--grid pattern-container\\\">\\n        <Header\\n          title=\\\"Search Form\\\"\\n          subtitle=\\\"This pattern uses a Validating Form pattern and is linked to a Display Form pattern for a single item display.\\\"\\n        />\\n        <div className=\\\"bx--row\\\">\\n          <div className=\\\"bx--col-xs-12\\\">\\n            <Search\\n              value={this.state.searchKeyword}\\n              labelText=\\\"Search\\\"\\n              closeButtonLabelText=\\\"\\\"\\n              placeHolderText=\\\"Search\\\"\\n              onChange={this.onSearch}\\n              id=\\\"search-1\\\"\\n              light={true}\\n            />\\n          </div>\\n        </div>\\n        <br />\\n        {this.state.searchKeyword !== \\\"\\\" && (\\n          <div className=\\\"bx--row\\\">\\n            <div className=\\\"bx--col-xs-12\\\">\\n              {filteredData.length > 0 ? (\\n                <DisplayForm\\n                  data={this.formatDataForDisplayForm(filteredData[0])}\\n                />\\n              ) : (\\n                <p className=\\\"center-align\\\">No matching result</p>\\n              )}\\n            </div>\\n          </div>\\n        )}\\n      </div>\\n    );\\n  }\\n}\\nexport default SearchForm;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport {\\n  Content,\\n  Header,\\n  HeaderName,\\n  SkipToContent,\\n  SideNav,\\n  SideNavItems,\\n  SideNavMenu,\\n  SideNavMenuItem,\\n} from 'carbon-components-react/lib/components/UIShell/';\\nimport UIShellBody from \\\"./UIShellBody\\\";\\n\\nconst Fade20 = () => (\\n  <svg icon width=\\\"20\\\" height=\\\"20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 32 32\\\" aria-hidden=\\\"true\\\">\\n    <path d=\\\"M8.24 25.14L7 26.67a14 14 0 0 0 4.18 2.44l.68-1.88a12\\n        12 0 0 1-3.62-2.09zm-4.05-7.07l-2 .35A13.89 13.89 0 0 0 3.86\\n        23l1.73-1a11.9 11.9 0 0 1-1.4-3.93zm7.63-13.31l-.68-1.88A14\\n        14 0 0 0 7 5.33l1.24 1.53a12 12 0 0 1 3.58-2.1zM5.59\\n        10L3.86 9a13.89 13.89 0 0 0-1.64 4.54l2 .35A11.9 11.9 0 0 1 5.59\\n        10zM16 2v2a12 12 0 0 1 0 24v2a14 14 0 0 0 0-28z\\\" />\\n  </svg>\\n);\\n\\nclass UIShell extends Component {\\n  header = \\\"Garage for Cloud Catalyst\\\";\\n  menuTitle = \\\"Secret Manager\\\";\\n  menuItems = [\\n    \\\"Secrets\\\"\\n\\n  ];\\n\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      patternName: this.menuItems[0]\\n    };\\n  }\\n\\n  onPatternSelection = label => {\\n    this.setState({ patternName: label });\\n  };\\n\\n  renderSideNavItems = () => {\\n    return this.menuItems.map(label => this.renderSideNavItem(label));\\n  };\\n\\n  renderSideNavItem = label => {\\n    return (\\n      <SideNavMenuItem href=\\\"# \\\" isActive={label === this.state.patternName ? true : false} onClick={e => this.onPatternSelection(label)}>{label}</SideNavMenuItem>\\n    );\\n  };\\n\\n  render() {\\n    return (\\n      <div>\\n        <Header aria-label=\\\"IBM Platform Name\\\">\\n          <SkipToContent />\\n          <HeaderName href=\\\"#\\\" prefix=\\\"IBM\\\">\\n            {this.header}\\n          </HeaderName>\\n        </Header>\\n        <SideNav aria-label=\\\"Side navigation\\\">\\n          <SideNavItems>\\n            <SideNavMenu\\n              defaultExpanded\\n              icon={<Fade20 />}\\n              title={this.menuTitle}\\n            >\\n              {this.renderSideNavItems()}\\n            </SideNavMenu>\\n          </SideNavItems>\\n        </SideNav>\\n        <Content id=\\\"main-content\\\"><UIShellBody patternName={this.state.patternName} /></Content>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default UIShell;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport UIShell from \\\"./components/UIShell\\\";\\nimport \\\"./App.scss\\\";\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <UIShell />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport \\\"./index.css\\\";\\nimport App from \\\"./App\\\";\\nimport * as serviceWorker from \\\"./serviceWorker\\\";\\n\\nReactDOM.render(<App />, document.getElementById(\\\"root\\\"));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{12:function(e,t,a){},48:function(e,t,a){e.exports=a(87)},53:function(e,t,a){},85:function(e,t,a){},87:function(e,t,a){\"use strict\";a.r(t);var n=a(0),l=a.n(n),r=a(24),i=a.n(r),s=(a(53),a(5)),c=a(6),o=a(8),d=a(7),m=a(9),u=a(15),p=a(100),b=a(93),v=a(94),h=a(99),E=(a(12),function(e){function t(){return Object(s.a)(this,t),Object(o.a)(this,Object(d.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:\"render\",value:function(){var e=this.props,t=e.title,a=e.subtitle;return l.a.createElement(\"div\",{className:\"bx--row pattern-description\"},l.a.createElement(\"div\",{className:\"bx--col-xs-12\"},l.a.createElement(\"h1\",{className:\"pattern-title\"},t),l.a.createElement(\"div\",{\"data-notification\":!0,className:\"bx--inline-notification bx--inline-notification--info\",role:\"alert\"},l.a.createElement(\"div\",{className:\"bx--inline-notification__details\"},l.a.createElement(\"svg\",{className:\"bx--inline-notification__icon\",width:\"16\",height:\"16\",viewBox:\"0 0 16 16\",xmlns:\"http://www.w3.org/2000/svg\"},l.a.createElement(\"path\",{d:\"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm1-3V7H7v6h2zM8 5a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\"})),l.a.createElement(\"div\",{className:\"bx--inline-notification__text-wrapper\"},l.a.createElement(\"p\",{className:\"bx--inline-notification__title\"},\"\"),l.a.createElement(\"p\",{className:\"bx--inline-notification__subtitle\"},a))))))}}]),t}(n.Component)),f=function(e){function t(e){var a;Object(s.a)(this,t);return(a=Object(o.a)(this,Object(d.a)(t).call(this,e))).state={data:e.data||[{label:\"Name\",value:\"John Doe\",type:\"textinput\"},{label:\"Address\",value:\"123 Main Street\",type:\"textinput\"},{label:\"City\",value:\"Anytown\",type:\"textinput\"},{label:\"State\",value:[\"TX\"],type:\"dropdown\"},{label:\"ZipCode\",value:\"12345\",type:\"textinput\"},{label:\"Country\",value:[\"United States\"],type:\"dropdown\"}],showDescription:e.showDescription||!1},a}return Object(m.a)(t,e),Object(c.a)(t,[{key:\"componentWillReceiveProps\",value:function(e){e.data&&this.setState({data:e.data})}},{key:\"render\",value:function(){var e=this.state.data,t=this.state.showDescription;return l.a.createElement(\"div\",{className:\"bx--grid\"},t&&l.a.createElement(E,{title:\"Display Form\",subtitle:\"Displays a model object as a form in a read only display.\"}),l.a.createElement(\"div\",{className:\"bx--row\"},l.a.createElement(\"div\",{className:\"bx--col-xs-12\"},l.a.createElement(p.a,null,l.a.createElement(b.a,null,e.map(function(e){return\"textinput\"===e.type?l.a.createElement(\"div\",{key:e.label,className:\"display-form-item\"},l.a.createElement(v.a,{disabled:!0,id:e.label,value:e.value,labelText:e.label.charAt(0).toUpperCase()+e.label.slice(1).replace(/([A-Z])/g,\" $1\")})):\"dropdown\"===e.type?l.a.createElement(\"div\",{key:e.label,className:\"display-form-item\"},l.a.createElement(\"p\",{className:\"bx--label left-align\"},e.label),l.a.createElement(h.a,{disabled:!0,id:e.label,label:\"Select a \"+e.label.toLowerCase()+\"..\",items:e.value,selectedItem:e.value[0]})):l.a.createElement(\"div\",null)}))))),l.a.createElement(\"br\",null),l.a.createElement(\"br\",null))}}]),t}(n.Component),y=a(41),C=a(11),S=a(101),w=!0,N=function(e){function t(e){var a;if(Object(s.a)(this,t),(a=Object(o.a)(this,Object(d.a)(t).call(this,e))).convertData=function(e){var t={};return e.forEach(function(e){t[e.label]=e.value}),t},a.saveData=function(e){var t,n,l=e.target,r=l.name,i=l.value;i?a.setState((t={},Object(C.a)(t,r,i),Object(C.a)(t,r+\"Invalid\",!1),t)):a.setState((n={},Object(C.a)(n,r,i),Object(C.a)(n,r+\"Invalid\",!0),n))},a.saveDataDropdown1=function(e){var t=e.selectedItem;a.setState({state:t,stateInvalid:!1})},a.saveDataDropdown2=function(e){var t=e.selectedItem;a.setState({country:t,countryInvalid:!1})},a.checkForm=function(){return w=!0,a.state.name||(a.setState({nameInvalid:!0}),w=!1),a.state.address||(a.setState({addressInvalid:!0}),w=!1),a.state.city||(a.setState({cityInvalid:!0}),w=!1),a.state.state||(a.setState({stateInvalid:!0}),w=!1),a.state.zipCode&&(\"United States\"!==a.state.country||/(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(a.state.zipCode))||(a.setState({zipCodeInvalid:!0}),w=!1),a.state.country||(a.setState({countryInvalid:!0}),w=!1),w},a.saveForm=function(e){if(e.preventDefault(),a.checkForm()){var t={name:a.state.name,address:a.state.address,city:a.state.city,state:a.state.state,zipCode:a.state.zipCode,country:a.state.country};\"function\"===typeof a.props.updateRow?a.props.updateRow(t):a.setState({dataToSave:t}),a.props.adding&&a.props.toggleAdding()}},a.state={dataToSave:{},showDescription:e.showDescription||!1},a.props.data){var n=a.convertData(a.props.data);a.state=Object(y.a)({},a.state,{name:n.Name,address:n.Address,city:n.City,state:n.State[0],zipCode:n.ZipCode,country:n.Country[0]})}return a}return Object(m.a)(t,e),Object(c.a)(t,[{key:\"componentWillReceiveProps\",value:function(e){if(e.data){var t=this.convertData(e.data);\"Enter data below\"===t.Name&&(t.Name=\"\"),this.setState({name:t.Name,address:t.Address,city:t.City,state:t.State[0],zipCode:t.ZipCode,country:t.Country[0]})}}},{key:\"render\",value:function(){var e=this,t=this.state.showDescription;return l.a.createElement(\"div\",{className:\"bx--grid pattern-container\"},t&&l.a.createElement(E,{title:\"Validating Form\",subtitle:\"Presents a model object as a data input form and interacts with a validation service for validation.\"}),l.a.createElement(\"div\",{className:\"bx--row\"},l.a.createElement(\"div\",{className:\"bx--col-xs-12\"},l.a.createElement(p.a,null,l.a.createElement(b.a,null,l.a.createElement(v.a,{id:\"name\",name:\"name\",value:this.state.name||\"\",onChange:this.saveData,labelText:\"Name\",maxLength:\"100\",invalid:this.state.nameInvalid,invalidText:\"Please enter a name..\"}),l.a.createElement(\"br\",null),l.a.createElement(\"br\",null),l.a.createElement(v.a,{id:\"address\",name:\"address\",value:this.state.address||\"\",onChange:this.saveData,labelText:\"Address\",maxLength:\"200\",invalid:this.state.addressInvalid,invalidText:\"Please enter an address..\"}),l.a.createElement(\"br\",null),l.a.createElement(\"br\",null),l.a.createElement(v.a,{id:\"city\",name:\"city\",value:this.state.city||\"\",onChange:this.saveData,labelText:\"City\",maxLength:\"100\",invalid:this.state.cityInvalid,invalidText:\"Please enter a city..\"}),l.a.createElement(\"br\",null),l.a.createElement(\"br\",null),l.a.createElement(\"p\",{className:\"bx--label left-align\"},\"State\"),l.a.createElement(h.a,{id:\"state\",label:\"Select a state..\",ariaLabel:\"Select a state..\",items:[\"AL\",\"AK\",\"AS\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"DC\",\"FM\",\"FL\",\"GA\",\"GU\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MH\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"MP\",\"OH\",\"OK\",\"OR\",\"PW\",\"PA\",\"PR\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VI\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\",\"Other\"],selectedItem:this.state.state,onChange:this.saveDataDropdown1}),this.state.stateInvalid&&l.a.createElement(\"p\",{className:\"dropdown-invalid\"},\"Please select a state..\"),l.a.createElement(\"br\",null),l.a.createElement(\"br\",null),l.a.createElement(v.a,{id:\"zipCode\",name:\"zipCode\",value:this.state.zipCode||\"\",onChange:this.saveData,labelText:\"Zip Code\",maxLength:\"20\",invalid:this.state.zipCodeInvalid,invalidText:\"Please enter a valid zip code..\"}),l.a.createElement(\"br\",null),l.a.createElement(\"br\",null),l.a.createElement(\"p\",{className:\"bx--label left-align\"},\"Country\"),l.a.createElement(h.a,{id:\"country\",label:\"Select a country..\",ariaLabel:\"Select a country..\",items:[\"United States\",\"Other\"],selectedItem:this.state.country,onChange:this.saveDataDropdown2}),this.state.countryInvalid&&l.a.createElement(\"p\",{className:\"dropdown-invalid\"},\"Please select a country..\"),l.a.createElement(\"br\",null),l.a.createElement(\"br\",null),l.a.createElement(\"div\",{className:\"left-align\"},t&&l.a.createElement(S.a,{onClick:this.saveForm},\"Submit\"),!t&&l.a.createElement(S.a,{onClick:this.saveForm},this.props.adding?\"Add\":\"Update\")))))),l.a.createElement(\"br\",null),l.a.createElement(\"br\",null),Object.keys(this.state.dataToSave).length>0&&l.a.createElement(\"div\",{className:\"bx--row\"},l.a.createElement(\"div\",{className:\"bx--col-xs-12 left-align\"},l.a.createElement(p.a,null,Object.keys(this.state.dataToSave).map(function(t){return l.a.createElement(\"p\",null,\"\\xa0\\xa0\",l.a.createElement(\"strong\",null,t.charAt(0).toUpperCase()+t.slice(1).replace(/([A-Z])/g,\" $1\"),\":\"),\" \",e.state.dataToSave[t])})),l.a.createElement(\"br\",null),l.a.createElement(\"br\",null))))}}]),t}(n.Component),g=!0,O=(n.Component,a(102)),x=a(95),j=!0,T=(n.Component,!0),I=(n.Component,a(17)),D=a(10),A=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(o.a)(this,Object(d.a)(t).call(this,e))).columns=[\"SecretName\",\"SecretValue\"],a.onRowClick=function(e){a.setState({selectedRow:e})},a.state={items:[],selectedRow:0,hidden:!0},a.handlePasswordChange=a.handlePasswordChange.bind(Object(I.a)(Object(I.a)(a))),a.toggleShow=a.toggleShow.bind(Object(I.a)(Object(I.a)(a))),a}return Object(m.a)(t,e),Object(c.a)(t,[{key:\"handlePasswordChange\",value:function(e){this.setState({password:e.target.value})}},{key:\"toggleShow\",value:function(){this.setState({hidden:!this.state.hidden})}},{key:\"componentDidMount\",value:function(){var e=this;fetch(\"/health\").then(function(e){return e.json()}).then(function(t){console.log(t),e.setState({items:t})})}},{key:\"renderTableHeader\",value:function(){return[\"SecretName\",\"SecretValue\",\"Action\"].map(function(e,t){return l.a.createElement(\"th\",{key:t},e.toUpperCase())})}},{key:\"render\",value:function(){return console.log(this.state.items),l.a.createElement(\"div\",null,l.a.createElement(\"h1\",{id:\"title\",class:\"pattern-title\"},\"Secrets\"),l.a.createElement(\"table\",{id:\"students\"},l.a.createElement(\"tbody\",null,l.a.createElement(\"tr\",null,this.renderTableHeader()),this.renderTableData())))}},{key:\"renderTableData\",value:function(){var e=this;return this.state.items.map(function(t,a){console.log(a);var n=t.SecretName,r=t.SecretValue;return 1==a?l.a.createElement(\"tr\",null,l.a.createElement(\"td\",null,n),l.a.createElement(\"td\",null,l.a.createElement(\"input\",{type:e.state.hidden?\"password\":\"text\",value:r,onChange:e.handlePasswordChange})),l.a.createElement(\"td\",null,l.a.createElement(\"button\",{onClick:e.toggleShow},\"Show / Hide\"))):l.a.createElement(\"tr\",null,l.a.createElement(\"td\",null,n),l.a.createElement(\"td\",null,r),l.a.createElement(\"td\",null,\"NA\"))})}}]),t}(n.Component),k=a(34),M=a.n(k),z=a(42),P=a(96),H=a(92),R=(n.Component,a(98)),L=R.a.Table,F=R.a.TableBody,V=R.a.TableCell,_=R.a.TableContainer,U=R.a.TableHead,W=R.a.TableHeader,B=R.a.TableRow,Z=R.a.TableSelectAll,$=R.a.TableSelectRow,J=(n.Component,!0),K=(n.Component,n.Component,n.Component,a(97)),G=R.a.Table,Y=R.a.TableBody,X=R.a.TableCell,q=R.a.TableContainer,Q=R.a.TableHead,ee=R.a.TableHeader,te=R.a.TableRow,ae=(n.Component,n.Component,function(e){function t(){var e,a;Object(s.a)(this,t);for(var n=arguments.length,l=new Array(n),r=0;r<n;r++)l[r]=arguments[r];return(a=Object(o.a)(this,(e=Object(d.a)(t)).call.apply(e,[this].concat(l)))).components={Secrets:A},a.defaultComponent=\"Display Form\",a}return Object(m.a)(t,e),Object(c.a)(t,[{key:\"render\",value:function(){var e=this.components[this.props.patternName||this.defaultComponent];return l.a.createElement(\"div\",{className:\"pattern-container\"},l.a.createElement(e,{showDescription:!0}))}}]),t}(n.Component)),ne=function(){return l.a.createElement(\"svg\",{icon:!0,width:\"20\",height:\"20\",xmlns:\"http://www.w3.org/2000/svg\",viewBox:\"0 0 32 32\",\"aria-hidden\":\"true\"},l.a.createElement(\"path\",{d:\"M8.24 25.14L7 26.67a14 14 0 0 0 4.18 2.44l.68-1.88a12 12 0 0 1-3.62-2.09zm-4.05-7.07l-2 .35A13.89 13.89 0 0 0 3.86 23l1.73-1a11.9 11.9 0 0 1-1.4-3.93zm7.63-13.31l-.68-1.88A14 14 0 0 0 7 5.33l1.24 1.53a12 12 0 0 1 3.58-2.1zM5.59 10L3.86 9a13.89 13.89 0 0 0-1.64 4.54l2 .35A11.9 11.9 0 0 1 5.59 10zM16 2v2a12 12 0 0 1 0 24v2a14 14 0 0 0 0-28z\"}))},le=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(o.a)(this,Object(d.a)(t).call(this,e))).header=\"Garage for Cloud Catalyst\",a.menuTitle=\"Secret Manager\",a.menuItems=[\"Secrets\"],a.onPatternSelection=function(e){a.setState({patternName:e})},a.renderSideNavItems=function(){return a.menuItems.map(function(e){return a.renderSideNavItem(e)})},a.renderSideNavItem=function(e){return l.a.createElement(u.SideNavMenuItem,{href:\"# \",isActive:e===a.state.patternName,onClick:function(t){return a.onPatternSelection(e)}},e)},a.state={patternName:a.menuItems[0]},a}return Object(m.a)(t,e),Object(c.a)(t,[{key:\"render\",value:function(){return l.a.createElement(\"div\",null,l.a.createElement(u.Header,{\"aria-label\":\"IBM Platform Name\"},l.a.createElement(u.SkipToContent,null),l.a.createElement(u.HeaderName,{href:\"#\",prefix:\"IBM\"},this.header)),l.a.createElement(u.SideNav,{\"aria-label\":\"Side navigation\"},l.a.createElement(u.SideNavItems,null,l.a.createElement(u.SideNavMenu,{defaultExpanded:!0,icon:l.a.createElement(ne,null),title:this.menuTitle},this.renderSideNavItems()))),l.a.createElement(u.Content,{id:\"main-content\"},l.a.createElement(ae,{patternName:this.state.patternName})))}}]),t}(n.Component),re=(a(85),function(e){function t(){return Object(s.a)(this,t),Object(o.a)(this,Object(d.a)(t).apply(this,arguments))}return Object(m.a)(t,e),Object(c.a)(t,[{key:\"render\",value:function(){return l.a.createElement(\"div\",{className:\"App\"},l.a.createElement(le,null))}}]),t}(n.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));i.a.render(l.a.createElement(re,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[48,2,1]]]);","extractedComments":[]}